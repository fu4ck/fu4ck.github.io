<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Saar&#39;s Blog</title>
  
  <subtitle>不忘初心 方得始终</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.mydreamdll.xyz/"/>
  <updated>2020-01-17T06:58:55.000Z</updated>
  <id>http://www.mydreamdll.xyz/</id>
  
  <author>
    <name>Saar</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>influxdb1</title>
    <link href="http://www.mydreamdll.xyz/2020/01/17/influxdb1/"/>
    <id>http://www.mydreamdll.xyz/2020/01/17/influxdb1/</id>
    <published>2020-01-17T07:00:52.706Z</published>
    <updated>2020-01-17T06:58:55.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="influxdb-启动流程学习笔记"><a href="#influxdb-启动流程学习笔记" class="headerlink" title="influxdb 启动流程学习笔记"></a>influxdb 启动流程学习笔记</h3><h4 id="流程分析"><a href="#流程分析" class="headerlink" title="流程分析"></a>流程分析</h4><p>本文基于influxdb 1.4来进行分析代码</p><p>influxdb入口文件在 /cmd/influxd/main.go文件中</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 主函数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">rand.Seed(time.Now().UnixNano())</span><br><span class="line"><span class="comment">//初始化</span></span><br><span class="line">m := NewMain()</span><br><span class="line">    <span class="comment">// Run </span></span><br><span class="line"><span class="keyword">if</span> err := m.Run(os.Args[<span class="number">1</span>:]...); err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Fprintln(os.Stderr, err)</span><br><span class="line">os.Exit(<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>NewMain函数初始化一个实例</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// NewMain return a new instance of Main.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewMain</span><span class="params">()</span> *<span class="title">Main</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;Main&#123;</span><br><span class="line">Stdin:  os.Stdin,</span><br><span class="line">Stdout: os.Stdout,</span><br><span class="line">Stderr: os.Stderr,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主要流程在Run函数中，</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Run determines and runs the command specified by the CLI args.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *Main)</span> <span class="title">Run</span><span class="params">(args ...<span class="keyword">string</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">name, args := cmd.ParseCommandName(args)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Extract name from args.</span></span><br><span class="line"><span class="keyword">switch</span> name &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">""</span>, <span class="string">"run"</span>:</span><br><span class="line">        <span class="comment">// 默认执行流程</span></span><br><span class="line">cmd := run.NewCommand()</span><br><span class="line"></span><br><span class="line"><span class="comment">// Tell the server the build details.</span></span><br><span class="line">cmd.Version = version</span><br><span class="line">cmd.Commit = commit</span><br><span class="line">cmd.Branch = branch</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 执行主要的函数</span></span><br><span class="line"><span class="keyword">if</span> err := cmd.Run(args...); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">"run: %s"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//中断信号量</span></span><br><span class="line">signalCh := <span class="built_in">make</span>(<span class="keyword">chan</span> os.Signal, <span class="number">1</span>)</span><br><span class="line">signal.Notify(signalCh, os.Interrupt, syscall.SIGTERM)</span><br><span class="line">cmd.Logger.Info(<span class="string">"Listening for signals"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Block until one of the signals above is received</span></span><br><span class="line">&lt;-signalCh</span><br><span class="line">cmd.Logger.Info(<span class="string">"Signal received, initializing clean shutdown..."</span>)</span><br><span class="line"><span class="keyword">go</span> cmd.Close()</span><br><span class="line"></span><br><span class="line"><span class="comment">// Block again until another signal is received, a shutdown timeout elapses,</span></span><br><span class="line"><span class="comment">// or the Command is gracefully closed</span></span><br><span class="line">cmd.Logger.Info(<span class="string">"Waiting for clean shutdown..."</span>)</span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> &lt;-signalCh:</span><br><span class="line">cmd.Logger.Info(<span class="string">"Second signal received, initializing hard shutdown"</span>)</span><br><span class="line"><span class="keyword">case</span> &lt;-time.After(time.Second * <span class="number">30</span>):</span><br><span class="line">cmd.Logger.Info(<span class="string">"Time limit reached, initializing hard shutdown"</span>)</span><br><span class="line"><span class="keyword">case</span> &lt;-cmd.Closed:</span><br><span class="line">cmd.Logger.Info(<span class="string">"Server shutdown completed"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// goodbye.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="string">"backup"</span>:</span><br><span class="line">        <span class="comment">//备份</span></span><br><span class="line">name := backup.NewCommand()</span><br><span class="line"><span class="keyword">if</span> err := name.Run(args...); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">"backup: %s"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"restore"</span>:</span><br><span class="line">        <span class="comment">//恢复</span></span><br><span class="line">name := restore.NewCommand()</span><br><span class="line"><span class="keyword">if</span> err := name.Run(args...); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">"restore: %s"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"config"</span>:</span><br><span class="line">        <span class="comment">//打印当前配置</span></span><br><span class="line"><span class="keyword">if</span> err := run.NewPrintConfigCommand().Run(args...); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">"config: %s"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"version"</span>:</span><br><span class="line"><span class="keyword">if</span> err := NewVersionCommand().Run(args...); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">"version: %s"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"help"</span>:</span><br><span class="line"><span class="keyword">if</span> err := help.NewCommand().Run(args...); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">"help: %s"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">`unknown command "%s"`</span>+<span class="string">"\n"</span>+<span class="string">`Run 'influxd help' for usage`</span>+<span class="string">"\n\n"</span>, name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先分析run部分：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Run parses the config from args and runs the server.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(cmd *Command)</span> <span class="title">Run</span><span class="params">(args ...<span class="keyword">string</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="comment">// Parse the command line flags.</span></span><br><span class="line">options, err := cmd.ParseFlags(args...)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//解析配置文件</span></span><br><span class="line">config, err := cmd.ParseConfig(options.GetConfigPath())</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">"parse config: %s"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Apply any environment variables on top of the parsed config</span></span><br><span class="line"><span class="keyword">if</span> err := config.ApplyEnvOverrides(cmd.Getenv); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">"apply env config: %v"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Propogate the top-level join options down to the meta config</span></span><br><span class="line">    <span class="comment">//解析join的集群环境下的iplist</span></span><br><span class="line"><span class="keyword">if</span> config.Join != <span class="string">""</span> &#123;</span><br><span class="line">config.Meta.JoinPeers = strings.Split(config.Join, <span class="string">","</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Command-line flags for -join and -hostname override the config</span></span><br><span class="line"><span class="comment">// and env variable</span></span><br><span class="line"><span class="keyword">if</span> options.Join != <span class="string">""</span> &#123;</span><br><span class="line">config.Meta.JoinPeers = strings.Split(options.Join, <span class="string">","</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 解析本地hostname</span></span><br><span class="line"><span class="keyword">if</span> options.Hostname != <span class="string">""</span> &#123;</span><br><span class="line">config.Hostname = options.Hostname</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Propogate the top-level hostname down to dependendent configs</span></span><br><span class="line">config.Meta.RemoteHostname = config.Hostname</span><br><span class="line"></span><br><span class="line"><span class="comment">// Validate the configuration.</span></span><br><span class="line">    <span class="comment">// 检查各个配置是否为空</span></span><br><span class="line"><span class="keyword">if</span> err := config.Validate(); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">"%s. To generate a valid configuration file run `influxd config &gt; influxdb.generated.conf`"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> logErr error</span><br><span class="line"><span class="keyword">if</span> cmd.Logger, logErr = config.Logging.New(cmd.Stderr); logErr != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="comment">// assign the default logger</span></span><br><span class="line">cmd.Logger = logger.New(cmd.Stderr)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Attempt to run pprof on :6060 before startup if debug pprof enabled.</span></span><br><span class="line">    <span class="comment">//是否开启pprof</span></span><br><span class="line"><span class="keyword">if</span> config.HTTPD.DebugPprofEnabled &#123;</span><br><span class="line">runtime.SetBlockProfileRate(<span class="keyword">int</span>(<span class="number">1</span> * time.Second))</span><br><span class="line">runtime.SetMutexProfileFraction(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123; http.ListenAndServe(<span class="string">"localhost:6060"</span>, <span class="literal">nil</span>) &#125;()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Print sweet InfluxDB logo.</span></span><br><span class="line">    <span class="comment">// 打印logo</span></span><br><span class="line"><span class="keyword">if</span> !config.Logging.SuppressLogo &amp;&amp; logger.IsTerminal(cmd.Stdout) &#123;</span><br><span class="line">fmt.Fprint(cmd.Stdout, logo)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Mark start-up in log.</span></span><br><span class="line">cmd.Logger.Info(<span class="string">"InfluxDB starting"</span>,</span><br><span class="line">zap.String(<span class="string">"version"</span>, cmd.Version),</span><br><span class="line">zap.String(<span class="string">"branch"</span>, cmd.Branch),</span><br><span class="line">zap.String(<span class="string">"commit"</span>, cmd.Commit))</span><br><span class="line">cmd.Logger.Info(<span class="string">"Go runtime"</span>,</span><br><span class="line">zap.String(<span class="string">"version"</span>, runtime.Version()),</span><br><span class="line">zap.Int(<span class="string">"maxprocs"</span>, runtime.GOMAXPROCS(<span class="number">0</span>)))</span><br><span class="line"></span><br><span class="line"><span class="comment">// If there was an error on startup when creating the logger, output it now.</span></span><br><span class="line"><span class="keyword">if</span> logErr != <span class="literal">nil</span> &#123;</span><br><span class="line">cmd.Logger.Error(<span class="string">"Unable to configure logger"</span>, zap.Error(logErr))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Write the PID file.</span></span><br><span class="line">    <span class="comment">// 写入pid文件</span></span><br><span class="line"><span class="keyword">if</span> err := cmd.writePIDFile(options.PIDFile); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">"write pid file: %s"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">cmd.pidfile = options.PIDFile</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> config.HTTPD.PprofEnabled &#123;</span><br><span class="line"><span class="comment">// Turn on block and mutex profiling.</span></span><br><span class="line">runtime.SetBlockProfileRate(<span class="keyword">int</span>(<span class="number">1</span> * time.Second))</span><br><span class="line">runtime.SetMutexProfileFraction(<span class="number">1</span>) <span class="comment">// Collect every sample</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Create server from config and start it.</span></span><br><span class="line">    <span class="comment">// 初始化服务器</span></span><br><span class="line">buildInfo := &amp;BuildInfo&#123;</span><br><span class="line">Version: cmd.Version,</span><br><span class="line">Commit:  cmd.Commit,</span><br><span class="line">Branch:  cmd.Branch,</span><br><span class="line">Time:    cmd.BuildTime,</span><br><span class="line">&#125;</span><br><span class="line">s, err := NewServer(config, buildInfo)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">"create server: %s"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">s.Logger = cmd.Logger</span><br><span class="line">s.CPUProfile = options.CPUProfile</span><br><span class="line">s.MemProfile = options.MemProfile</span><br><span class="line">     <span class="comment">// 启动</span></span><br><span class="line"><span class="keyword">if</span> err := s.Open(); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">"open server: %s"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">cmd.Server = s</span><br><span class="line"></span><br><span class="line"><span class="comment">// Begin monitoring the server's error channel.</span></span><br><span class="line"><span class="keyword">go</span> cmd.monitorServerErrors()</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>初始化函数NewServer</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// NewServer returns a new instance of Server built from a config.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewServer</span><span class="params">(c *Config, buildInfo *BuildInfo)</span> <span class="params">(*Server, error)</span></span> &#123;</span><br><span class="line"><span class="comment">// We need to ensure that a meta directory always exists even if</span></span><br><span class="line"><span class="comment">// we don't start the meta store.  node.json is always stored under</span></span><br><span class="line"><span class="comment">// the meta directory.</span></span><br><span class="line">    <span class="comment">// 建立元数据目录，并加权</span></span><br><span class="line"><span class="keyword">if</span> err := os.MkdirAll(c.Meta.Dir, <span class="number">0777</span>); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">"mkdir all: %s"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 0.10-rc1 and prior would sometimes put the node.json at the root</span></span><br><span class="line"><span class="comment">// dir which breaks backup/restore and restarting nodes.  This moves</span></span><br><span class="line"><span class="comment">// the file from the root so it's always under the meta dir.</span></span><br><span class="line">    <span class="comment">//移动和恢复节点信息</span></span><br><span class="line">oldPath := filepath.Join(filepath.Dir(c.Meta.Dir), <span class="string">"node.json"</span>)</span><br><span class="line">newPath := filepath.Join(c.Meta.Dir, <span class="string">"node.json"</span>)</span><br><span class="line"><span class="comment">//修改</span></span><br><span class="line"><span class="keyword">if</span> _, err := os.Stat(oldPath); err == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">if</span> err := os.Rename(oldPath, newPath); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 从磁盘中加载节点信息</span></span><br><span class="line">node, err := influxdb.LoadNode(c.Meta.Dir)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">if</span> !os.IsNotExist(err) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//不存在则新建</span></span><br><span class="line">node = influxdb.NewNode(c.Meta.Dir)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//if err := raftDBExists(c.Meta.Dir); err != nil &#123;</span></span><br><span class="line"><span class="comment">//return nil, err</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// In 0.10.0 bind-address got moved to the top level. Check</span></span><br><span class="line"><span class="comment">// The old location to keep things backwards compatible</span></span><br><span class="line">bind := c.BindAddress</span><br><span class="line"><span class="keyword">if</span> c.Meta.BindAddress != <span class="string">""</span> &#123;</span><br><span class="line">bind = c.Meta.BindAddress</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判断元数据是否打开</span></span><br><span class="line"><span class="keyword">if</span> !c.Data.Enabled &amp;&amp; !c.Meta.Enabled &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">"must run as either meta node or data node or both"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//初始化</span></span><br><span class="line">s := &amp;Server&#123;</span><br><span class="line">buildInfo: *buildInfo,</span><br><span class="line">err:       <span class="built_in">make</span>(<span class="keyword">chan</span> error),</span><br><span class="line">closing:   <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;),</span><br><span class="line"></span><br><span class="line">Node:        node,</span><br><span class="line">BindAddress: bind,</span><br><span class="line"></span><br><span class="line">Logger: logger.New(os.Stderr),</span><br><span class="line"></span><br><span class="line"><span class="comment">//MetaClient: meta.NewClient(c.Meta),</span></span><br><span class="line">MetaClient: meta.NewClient(),  </span><br><span class="line"></span><br><span class="line">reportingDisabled: c.ReportingDisabled,</span><br><span class="line">joinPeers:         c.Meta.JoinPeers,</span><br><span class="line">metaUseTLS:        c.Meta.HTTPSEnabled,</span><br><span class="line"></span><br><span class="line">httpAPIAddr: c.HTTPD.BindAddress,   <span class="comment">// http服务bind地址</span></span><br><span class="line">httpUseTLS:  c.HTTPD.HTTPSEnabled,   <span class="comment">//https打开</span></span><br><span class="line">tcpAddr:     bind,</span><br><span class="line"></span><br><span class="line">config: c,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//初始化元数据服务</span></span><br><span class="line"><span class="keyword">if</span> c.Meta.Enabled &#123;</span><br><span class="line">s.MetaService = meta.NewService(c.Meta)</span><br><span class="line">s.MetaService.Version = s.buildInfo.Version</span><br><span class="line">s.MetaService.Node = s.Node</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> c.AdminCluster.Enabled &#123;</span><br><span class="line">s.AdminClusterService = admin_cluster.NewService(c.AdminCluster)</span><br><span class="line">s.AdminClusterService.Version = s.buildInfo.Version</span><br><span class="line">s.AdminClusterService.Handler.MetaClient = s.MetaClient</span><br><span class="line">s.AdminClusterService.TCPHandler.MetaClient = s.MetaClient</span><br><span class="line">s.AdminClusterService.TCPHandler.Server = s</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//初始化监控信息</span></span><br><span class="line">s.Monitor = monitor.New(s, c.Monitor)</span><br><span class="line">s.config.registerDiagnostics(s.Monitor)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> c.Data.Enabled &#123;</span><br><span class="line">        <span class="comment">//初始化tsdb</span></span><br><span class="line">s.TSDBStore = tsdb.NewStore(c.Data.Dir)</span><br><span class="line">s.TSDBStore.EngineOptions.Config = c.Data</span><br><span class="line"></span><br><span class="line">s.AdminClusterService.TCPHandler.TSDBStore = s.TSDBStore</span><br><span class="line"></span><br><span class="line"><span class="comment">// Copy TSDB configuration.</span></span><br><span class="line">s.TSDBStore.EngineOptions.EngineVersion = c.Data.Engine</span><br><span class="line">s.TSDBStore.EngineOptions.IndexVersion = c.Data.Index</span><br><span class="line"></span><br><span class="line"><span class="comment">// Create the Subscriber service</span></span><br><span class="line">s.Subscriber = subscriber.NewService(c.Subscriber)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Set the shard writer</span></span><br><span class="line">s.ShardWriter = cluster.NewShardWriter(time.Duration(c.Cluster.ShardWriterTimeout), c.Cluster.MaxRemoteWriteConnections)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Create the hinted handoff service</span></span><br><span class="line">s.HintedHandoff = hh.NewService(c.HintedHandoff, s.ShardWriter, s.MetaClient)</span><br><span class="line">s.HintedHandoff.Monitor = s.Monitor</span><br><span class="line"></span><br><span class="line"><span class="comment">// Initialize points writer.</span></span><br><span class="line">s.PointsWriter = cluster.NewPointsWriter()</span><br><span class="line">s.PointsWriter.WriteTimeout = time.Duration(c.Coordinator.WriteTimeout)</span><br><span class="line">s.PointsWriter.TSDBStore = s.TSDBStore</span><br><span class="line">s.PointsWriter.ShardWriter = s.ShardWriter</span><br><span class="line">s.PointsWriter.HintedHandoff = s.HintedHandoff</span><br><span class="line">s.PointsWriter.Node = s.Node</span><br><span class="line"></span><br><span class="line"><span class="comment">// Initialize meta executor.</span></span><br><span class="line">metaExecutor := cluster.NewMetaExecutor()</span><br><span class="line">metaExecutor.MetaClient = s.MetaClient</span><br><span class="line">metaExecutor.Node = s.Node</span><br><span class="line"></span><br><span class="line"><span class="comment">// Initialize query executor.</span></span><br><span class="line">        <span class="comment">// 初始化查询</span></span><br><span class="line">s.QueryExecutor = query.NewExecutor()</span><br><span class="line">        <span class="comment">//初始化集群存储分片</span></span><br><span class="line">clusterShardMapper := &amp;cluster.ClusterShardMapper&#123;</span><br><span class="line">MetaClient: s.MetaClient,</span><br><span class="line">TSDBStore:  coordinator.LocalTSDBStore&#123;Store: s.TSDBStore&#125;,</span><br><span class="line">LocalShardMapper: &amp;coordinator.LocalShardMapper&#123;</span><br><span class="line">MetaClient: s.MetaClient,</span><br><span class="line">TSDBStore:  coordinator.LocalTSDBStore&#123;Store: s.TSDBStore&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">Node:               s.Node,</span><br><span class="line">ShardMapperTimeout: time.Duration(s.config.Cluster.ShardMapperTimeout),</span><br><span class="line">&#125;</span><br><span class="line">clusterShardMapper.WithLogger(s.Logger)</span><br><span class="line"><span class="comment">//初始化执行</span></span><br><span class="line">        <span class="comment">//设置最大的查询范围和bucket数目等</span></span><br><span class="line">s.QueryExecutor.StatementExecutor = &amp;cluster.StatementExecutor&#123;</span><br><span class="line">MetaClient:        s.MetaClient,</span><br><span class="line">TaskManager:       s.QueryExecutor.TaskManager,</span><br><span class="line">TSDBStore:         s.TSDBStore,</span><br><span class="line">ShardMapper:       clusterShardMapper,</span><br><span class="line">Monitor:           s.Monitor,</span><br><span class="line">PointsWriter:      s.PointsWriter,</span><br><span class="line">MaxSelectPointN:   c.Coordinator.MaxSelectPointN,</span><br><span class="line">MaxSelectSeriesN:  c.Coordinator.MaxSelectSeriesN,</span><br><span class="line">MaxSelectBucketsN: c.Coordinator.MaxSelectBucketsN,</span><br><span class="line">MetaExecutor:      metaExecutor,</span><br><span class="line">&#125;</span><br><span class="line">s.QueryExecutor.TaskManager.QueryTimeout = time.Duration(c.Coordinator.QueryTimeout)</span><br><span class="line">s.QueryExecutor.TaskManager.LogQueriesAfter = time.Duration(c.Coordinator.LogQueriesAfter)</span><br><span class="line">s.QueryExecutor.TaskManager.MaxConcurrentQueries = c.Coordinator.MaxConcurrentQueries</span><br><span class="line"></span><br><span class="line"><span class="comment">// Initialize the monitor</span></span><br><span class="line">s.Monitor.Version = s.buildInfo.Version</span><br><span class="line">s.Monitor.Commit = s.buildInfo.Commit</span><br><span class="line">s.Monitor.Branch = s.buildInfo.Branch</span><br><span class="line">s.Monitor.BuildTime = s.buildInfo.Time</span><br><span class="line">s.Monitor.PointsWriter = (*monitorPointsWriter)(s.PointsWriter)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> s, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>open启动服务：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Open opens the meta and data store and all services.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *Server)</span> <span class="title">Open</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="comment">// Start profiling, if set.</span></span><br><span class="line">    <span class="comment">// linux profile</span></span><br><span class="line">startProfile(s.CPUProfile, s.MemProfile)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Open shared TCP connection.</span></span><br><span class="line">    <span class="comment">// 启动tcp连接</span></span><br><span class="line">ln, err := net.Listen(<span class="string">"tcp"</span>, s.BindAddress)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">"listen: %s"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">s.Listener = ln</span><br><span class="line"></span><br><span class="line"><span class="comment">// Multiplex listener.</span></span><br><span class="line">    <span class="comment">// 启动多路复用器</span></span><br><span class="line">mux := tcp.NewMux()</span><br><span class="line">s.Mux = mux</span><br><span class="line"><span class="keyword">go</span> mux.Serve(ln)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> s.MetaService != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="comment">//元数据服务raftlistener初始化</span></span><br><span class="line">s.MetaService.RaftListener = mux.Listen(meta.MuxHeader)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Configure logging for all services and clients.</span></span><br><span class="line"><span class="keyword">if</span> s.config.Meta.LoggingEnabled &#123;</span><br><span class="line">s.MetaService.WithLogger(s.Logger)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Open meta service.</span></span><br><span class="line">        <span class="comment">//元数据服务启动</span></span><br><span class="line"><span class="keyword">if</span> err := s.MetaService.Open(); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">"open meta service: %s"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">go</span> s.monitorErrorChan(s.MetaService.Err())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> s.AdminClusterService != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="comment">// Configure logging for all services and clients.</span></span><br><span class="line"><span class="keyword">if</span> s.config.AdminCluster.ClusterTracing &#123;</span><br><span class="line">s.AdminClusterService.WithLogger(s.Logger)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// TCP listen</span></span><br><span class="line">s.AdminClusterService.TCPHandler.Listener = s.Mux.Listen(admin_cluster.MuxHeader)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Open admin cluster service.</span></span><br><span class="line">        <span class="comment">//启动集群admin_cluster服务</span></span><br><span class="line"><span class="keyword">if</span> err := s.AdminClusterService.Open(); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">"open admin cluster service: %s"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// initialize MetaClient.</span></span><br><span class="line">    <span class="comment">//初始化元数据客户端，用于设置集群功能，加入集群等功能。</span></span><br><span class="line"><span class="keyword">if</span> err = s.initializeMetaClient(); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Start the reporting service, if not disabled.</span></span><br><span class="line"><span class="comment">//if !s.reportingDisabled &#123;</span></span><br><span class="line"><span class="comment">//go s.startServerReporting()</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>initializeMetaClient函数中：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// initializeMetaClient will set the MetaClient and join the node to the cluster if needed</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *Server)</span> <span class="title">initializeMetaClient</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="comment">// It's the first time starting up and we need to either join</span></span><br><span class="line"><span class="comment">// the cluster or initialize this node as the first member</span></span><br><span class="line">    <span class="comment">//如果每天joinpeers，则返回</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(s.joinPeers) == <span class="number">0</span> &#123;</span><br><span class="line"><span class="comment">// start up a new single node cluster</span></span><br><span class="line"><span class="keyword">if</span> s.MetaService == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">"server not set to join existing cluster must run also as a meta node"</span>)</span><br><span class="line">&#125;</span><br><span class="line">s.MetaClient.SetMetaServers([]<span class="keyword">string</span>&#123;s.MetaService.HTTPAddr()&#125;)</span><br><span class="line">s.MetaClient.SetTLS(s.metaUseTLS)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">var</span> err error</span><br><span class="line"><span class="keyword">var</span> joinPeers []<span class="keyword">string</span></span><br><span class="line"><span class="keyword">if</span> s.MetaService != <span class="literal">nil</span> &#123;</span><br><span class="line">raddr := s.remoteAddr(s.MetaService.HTTPAddr())</span><br><span class="line">joinPeers, err = s.filterAddr(s.joinPeers, raddr)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">joinPeers = s.joinPeers</span><br><span class="line">&#125;</span><br><span class="line">s.MetaClient.SetMetaServers(joinPeers)</span><br><span class="line">s.MetaClient.SetTLS(s.metaUseTLS)</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">//打开client</span></span><br><span class="line"><span class="keyword">if</span> err := s.MetaClient.Open(); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// if the node ID is &gt; 0 then we need to initialize the metaclient</span></span><br><span class="line"><span class="keyword">if</span> s.Node.GetMetaID() &gt; <span class="number">0</span> || s.Node.GetDataID() &gt; <span class="number">0</span> &#123;</span><br><span class="line">s.MetaClient.WaitForDataChanged()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(s.joinPeers) &gt; <span class="number">0</span> &#123;</span><br><span class="line">s.MetaClient.SetMetaServers(s.joinPeers)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> s.config.Data.Enabled &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">t := time.NewTicker(time.Second)</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> &lt;-t.C:</span><br><span class="line">                    <span class="comment">//定时器服务，检查是否打开数据服务</span></span><br><span class="line"><span class="keyword">if</span> _, err := s.MetaClient.DataNode(s.Node.GetDataID()); err == <span class="literal">nil</span> &#123;</span><br><span class="line">oerr := s.OpenDataServer()</span><br><span class="line"><span class="keyword">if</span> oerr != <span class="literal">nil</span> &#123;</span><br><span class="line">s.Logger.Error(<span class="string">"failed to open data server."</span>, zap.Error(oerr))</span><br><span class="line"><span class="built_in">panic</span>(<span class="string">"open data server failed"</span>)</span><br><span class="line">&#125;</span><br><span class="line">s.Logger.Info(<span class="string">"data server started"</span>, zap.Uint64(<span class="string">"node id"</span>, s.Node.GetDataID()))</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> &lt;-s.closing:</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果找到数据节点，则启动opendataServer函数，启动数据服务：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *Server)</span> <span class="title">OpenDataServer</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> s.TSDBStore != <span class="literal">nil</span> &amp;&amp; !s.DataServicesOpened &#123;</span><br><span class="line">s.DataServicesOpened = <span class="literal">true</span></span><br><span class="line"><span class="comment">// Append services.</span></span><br><span class="line">         <span class="comment">// 启动集群服务，初始化所有的服务</span></span><br><span class="line">s.appendClusterService(s.config.Cluster)</span><br><span class="line">s.appendMonitorService()</span><br><span class="line">s.appendPrecreatorService(s.config.Precreator)</span><br><span class="line">s.appendSnapshotterService()</span><br><span class="line">s.appendContinuousQueryService(s.config.ContinuousQuery)</span><br><span class="line">s.appendAntiEntropyService(s.config.AntiEntropy)</span><br><span class="line">        <span class="comment">// http服务</span></span><br><span class="line">s.appendHTTPDService(s.config.HTTPD)</span><br><span class="line">s.appendStorageService(s.config.Storage)</span><br><span class="line">        <span class="comment">//RetentionPolicy</span></span><br><span class="line">s.appendRetentionPolicyService(s.config.Retention)</span><br><span class="line"><span class="keyword">for</span> _, i := <span class="keyword">range</span> s.config.GraphiteInputs &#123;</span><br><span class="line"><span class="keyword">if</span> err := s.appendGraphiteService(i); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> _, i := <span class="keyword">range</span> s.config.CollectdInputs &#123;</span><br><span class="line">s.appendCollectdService(i)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> _, i := <span class="keyword">range</span> s.config.OpenTSDBInputs &#123;</span><br><span class="line"><span class="keyword">if</span> err := s.appendOpenTSDBService(i); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> _, i := <span class="keyword">range</span> s.config.UDPInputs &#123;</span><br><span class="line">s.appendUDPService(i)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">s.Subscriber.MetaClient = s.MetaClient</span><br><span class="line">s.PointsWriter.MetaClient = s.MetaClient</span><br><span class="line">s.Monitor.MetaClient = s.MetaClient</span><br><span class="line">s.ShardWriter.MetaClient = s.MetaClient</span><br><span class="line">s.HintedHandoff.MetaClient = s.MetaClient</span><br><span class="line"></span><br><span class="line">s.ClusterService.Listener = s.Mux.Listen(cluster.MuxHeader)</span><br><span class="line">s.SnapshotterService.Listener = s.Mux.Listen(snapshotter.MuxHeader)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Configure logging for all services and clients.</span></span><br><span class="line"><span class="keyword">if</span> s.config.Meta.LoggingEnabled &#123;</span><br><span class="line">s.MetaClient.WithLogger(s.Logger)</span><br><span class="line">&#125;</span><br><span class="line">s.TSDBStore.WithLogger(s.Logger)</span><br><span class="line"><span class="keyword">if</span> s.config.Data.QueryLogEnabled &#123;</span><br><span class="line">s.QueryExecutor.WithLogger(s.Logger)</span><br><span class="line">&#125;</span><br><span class="line">s.PointsWriter.WithLogger(s.Logger)</span><br><span class="line">s.Subscriber.WithLogger(s.Logger)</span><br><span class="line">s.HintedHandoff.WithLogger(s.Logger)</span><br><span class="line"><span class="keyword">for</span> _, svc := <span class="keyword">range</span> s.Services &#123;</span><br><span class="line">svc.WithLogger(s.Logger)</span><br><span class="line">&#125;</span><br><span class="line">s.SnapshotterService.WithLogger(s.Logger)</span><br><span class="line">s.Monitor.WithLogger(s.Logger)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Open TSDB store.</span></span><br><span class="line">        <span class="comment">// tsdb启动</span></span><br><span class="line"><span class="keyword">if</span> err := s.TSDBStore.Open(); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">"open tsdb store: %s"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Open the hinted handoff service</span></span><br><span class="line"><span class="keyword">if</span> err := s.HintedHandoff.Open(); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">"open hinted handoff: %s"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Open the subscriber service</span></span><br><span class="line"><span class="keyword">if</span> err := s.Subscriber.Open(); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">"open subscriber: %s"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Open the points writer service</span></span><br><span class="line"><span class="keyword">if</span> err := s.PointsWriter.Open(); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">"open points writer: %s"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">s.PointsWriter.AddWriteSubscriber(s.Subscriber.Points())</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _, service := <span class="keyword">range</span> s.Services &#123;</span><br><span class="line">            <span class="comment">//将注册的服务都启动起来，这边调用每个服务的open方法启动起来</span></span><br><span class="line"><span class="keyword">if</span> err := service.Open(); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">"open service: %s"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> s.TSDBStore == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">"Data server is not enabled"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>服务主要有下面这些：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">cluster</span><br><span class="line">monitor</span><br><span class="line">precreator</span><br><span class="line">snapshotter</span><br><span class="line">continuousquery</span><br><span class="line">antientropy</span><br><span class="line">http</span><br><span class="line">storage</span><br><span class="line">retentionpolicy</span><br><span class="line">graphite</span><br><span class="line">collectd</span><br><span class="line">opentsdb</span><br><span class="line">udp</span><br><span class="line">hh</span><br><span class="line">meta</span><br></pre></td></tr></table></figure><p>每个服务都有open函数，分别启动。</p><p>举例来说：</p><p>http服务初始化函数NewService:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// NewService returns a new instance of Service.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewService</span><span class="params">(c Config)</span> *<span class="title">Service</span></span> &#123;</span><br><span class="line">s := &amp;Service&#123;</span><br><span class="line">addr:           c.BindAddress,</span><br><span class="line">https:          c.HTTPSEnabled,</span><br><span class="line">cert:           c.HTTPSCertificate,</span><br><span class="line">key:            c.HTTPSPrivateKey,</span><br><span class="line">limit:          c.MaxConnectionLimit,</span><br><span class="line">err:            <span class="built_in">make</span>(<span class="keyword">chan</span> error),</span><br><span class="line">unixSocket:     c.UnixSocketEnabled,</span><br><span class="line">unixSocketPerm: <span class="keyword">uint32</span>(c.UnixSocketPermissions),</span><br><span class="line">bindSocket:     c.BindSocket,</span><br><span class="line">Handler:        NewHandler(c),  <span class="comment">//服务启动处理函数</span></span><br><span class="line">Logger:         zap.NewNop(),</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> s.key == <span class="string">""</span> &#123;</span><br><span class="line">s.key = s.cert</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> c.UnixSocketGroup != <span class="literal">nil</span> &#123;</span><br><span class="line">s.unixSocketGroup = <span class="keyword">int</span>(*c.UnixSocketGroup)</span><br><span class="line">&#125;</span><br><span class="line">s.Handler.Logger = s.Logger</span><br><span class="line"><span class="keyword">return</span> s</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>handler函数：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewHandler</span><span class="params">(c Config)</span> *<span class="title">Handler</span></span> &#123;</span><br><span class="line">h := &amp;Handler&#123;</span><br><span class="line">mux:            pat.New(),</span><br><span class="line">Config:         &amp;c,</span><br><span class="line">Logger:         zap.NewNop(),</span><br><span class="line">CLFLogger:      log.New(os.Stderr, <span class="string">"[httpd] "</span>, <span class="number">0</span>),</span><br><span class="line">Store:          storage.NewStore(),</span><br><span class="line">stats:          &amp;Statistics&#123;&#125;,</span><br><span class="line">requestTracker: NewRequestTracker(),</span><br><span class="line">sema:           <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;, <span class="number">100</span>),</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Limit the number of concurrent &amp; enqueued write requests.</span></span><br><span class="line">h.writeThrottler = NewThrottler(c.MaxConcurrentWriteLimit, c.MaxEnqueuedWriteLimit)</span><br><span class="line">h.writeThrottler.EnqueueTimeout = c.EnqueuedWriteTimeout</span><br><span class="line"></span><br><span class="line"><span class="comment">// Disable the write log if they have been suppressed.</span></span><br><span class="line">writeLogEnabled := c.LogEnabled</span><br><span class="line"><span class="keyword">if</span> c.SuppressWriteLog &#123;</span><br><span class="line">writeLogEnabled = <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">//所有服务查询的入口函数在这边处理</span></span><br><span class="line">    h.AddRoutes([]Route&#123;</span><br><span class="line">Route&#123;</span><br><span class="line"><span class="string">"query-options"</span>, <span class="comment">// Satisfy CORS checks.</span></span><br><span class="line"><span class="string">"OPTIONS"</span>, <span class="string">"/query"</span>, <span class="literal">false</span>, <span class="literal">true</span>, h.serveOptions,</span><br><span class="line">&#125;,</span><br><span class="line">Route&#123;</span><br><span class="line"><span class="string">"query"</span>, <span class="comment">// Query serving route.</span></span><br><span class="line"><span class="string">"GET"</span>, <span class="string">"/query"</span>, <span class="literal">true</span>, <span class="literal">true</span>, h.serveQuery,</span><br><span class="line">&#125;,</span><br><span class="line">Route&#123;</span><br><span class="line"><span class="string">"query"</span>, <span class="comment">// Query serving route.</span></span><br><span class="line"><span class="string">"POST"</span>, <span class="string">"/query"</span>, <span class="literal">true</span>, <span class="literal">true</span>, h.serveQuery,</span><br><span class="line">&#125;,</span><br><span class="line">Route&#123;</span><br><span class="line">            ....</span><br><span class="line"><span class="string">"GET"</span>, <span class="string">"/metrics"</span>, <span class="literal">false</span>, <span class="literal">true</span>, promhttp.Handler().ServeHTTP,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;...)</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> h</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查询函数serveQuery；</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// serveQuery parses an incoming query and, if valid, executes the query.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(h *Handler)</span> <span class="title">serveQuery</span><span class="params">(w http.ResponseWriter, r *http.Request, user meta.User)</span></span> &#123;</span><br><span class="line">atomic.AddInt64(&amp;h.stats.QueryRequests, <span class="number">1</span>)</span><br><span class="line"><span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">(start time.Time)</span></span> &#123;</span><br><span class="line">atomic.AddInt64(&amp;h.stats.QueryRequestDuration, time.Since(start).Nanoseconds())</span><br><span class="line">&#125;(time.Now())</span><br><span class="line">h.requestTracker.Add(r, user)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Retrieve the underlying ResponseWriter or initialize our own.</span></span><br><span class="line">rw, ok := w.(ResponseWriter)</span><br><span class="line"><span class="keyword">if</span> !ok &#123;</span><br><span class="line">rw = NewResponseWriter(w, r)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Retrieve the node id the query should be executed on.</span></span><br><span class="line">nodeID, _ := strconv.ParseUint(r.FormValue(<span class="string">"node_id"</span>), <span class="number">10</span>, <span class="number">64</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> qr io.Reader</span><br><span class="line"><span class="comment">// Attempt to read the form value from the "q" form value.</span></span><br><span class="line"><span class="keyword">if</span> qp := strings.TrimSpace(r.FormValue(<span class="string">"q"</span>)); qp != <span class="string">""</span> &#123;</span><br><span class="line">qr = strings.NewReader(qp)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> r.MultipartForm != <span class="literal">nil</span> &amp;&amp; r.MultipartForm.File != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="comment">// If we have a multipart/form-data, try to retrieve a file from 'q'.</span></span><br><span class="line"><span class="keyword">if</span> fhs := r.MultipartForm.File[<span class="string">"q"</span>]; <span class="built_in">len</span>(fhs) &gt; <span class="number">0</span> &#123;</span><br><span class="line">f, err := fhs[<span class="number">0</span>].Open()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">h.httpError(rw, err.Error(), http.StatusBadRequest)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> f.Close()</span><br><span class="line">qr = f</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> qr == <span class="literal">nil</span> &#123;</span><br><span class="line">h.httpError(rw, <span class="string">`missing required parameter "q"`</span>, http.StatusBadRequest)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">epoch := strings.TrimSpace(r.FormValue(<span class="string">"epoch"</span>))</span><br><span class="line"><span class="comment">// 初始化查询解析器</span></span><br><span class="line">p := influxql.NewParser(qr)</span><br><span class="line">db := r.FormValue(<span class="string">"db"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Sanitize the request query params so it doesn't show up in the response logger.</span></span><br><span class="line"><span class="comment">// Do this before anything else so a parsing error doesn't leak passwords.</span></span><br><span class="line">sanitize(r)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Parse the parameters</span></span><br><span class="line">rawParams := r.FormValue(<span class="string">"params"</span>)</span><br><span class="line"><span class="keyword">if</span> rawParams != <span class="string">""</span> &#123;</span><br><span class="line"><span class="keyword">var</span> params <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;</span><br><span class="line">decoder := json.NewDecoder(strings.NewReader(rawParams))</span><br><span class="line">decoder.UseNumber()</span><br><span class="line"><span class="keyword">if</span> err := decoder.Decode(&amp;params); err != <span class="literal">nil</span> &#123;</span><br><span class="line">h.httpError(rw, <span class="string">"error parsing query parameters: "</span>+err.Error(), http.StatusBadRequest)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Convert json.Number into int64 and float64 values</span></span><br><span class="line"><span class="keyword">for</span> k, v := <span class="keyword">range</span> params &#123;</span><br><span class="line"><span class="keyword">if</span> v, ok := v.(json.Number); ok &#123;</span><br><span class="line"><span class="keyword">var</span> err error</span><br><span class="line"><span class="keyword">if</span> strings.Contains(<span class="keyword">string</span>(v), <span class="string">"."</span>) &#123;</span><br><span class="line">params[k], err = v.Float64()</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">params[k], err = v.Int64()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">h.httpError(rw, <span class="string">"error parsing json value: "</span>+err.Error(), http.StatusBadRequest)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">p.SetParams(params)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Parse query from query string.</span></span><br><span class="line">    <span class="comment">//开始解析query查询语句</span></span><br><span class="line">q, err := p.ParseQuery()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">h.httpError(rw, <span class="string">"error parsing query: "</span>+err.Error(), http.StatusBadRequest)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Check authorization.</span></span><br><span class="line">    <span class="comment">//检查认证信息</span></span><br><span class="line"><span class="keyword">if</span> h.Config.AuthEnabled &#123;</span><br><span class="line"><span class="keyword">if</span> err := h.QueryAuthorizer.AuthorizeQuery(user, q, db); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">if</span> err, ok := err.(meta.ErrAuthorize); ok &#123;</span><br><span class="line">h.Logger.Info(<span class="string">"Unauthorized request"</span>,</span><br><span class="line">zap.String(<span class="string">"user"</span>, err.User),</span><br><span class="line">zap.Stringer(<span class="string">"query"</span>, err.Query),</span><br><span class="line">logger.Database(err.Database))</span><br><span class="line">&#125;</span><br><span class="line">h.httpError(rw, <span class="string">"error authorizing query: "</span>+err.Error(), http.StatusForbidden)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Parse chunk size. Use default if not provided or unparsable.</span></span><br><span class="line">chunked := r.FormValue(<span class="string">"chunked"</span>) == <span class="string">"true"</span></span><br><span class="line">chunkSize := DefaultChunkSize</span><br><span class="line"><span class="keyword">if</span> chunked &#123;</span><br><span class="line"><span class="keyword">if</span> n, err := strconv.ParseInt(r.FormValue(<span class="string">"chunk_size"</span>), <span class="number">10</span>, <span class="number">64</span>); err == <span class="literal">nil</span> &amp;&amp; <span class="keyword">int</span>(n) &gt; <span class="number">0</span> &#123;</span><br><span class="line">chunkSize = <span class="keyword">int</span>(n)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Parse whether this is an async command.</span></span><br><span class="line">async := r.FormValue(<span class="string">"async"</span>) == <span class="string">"true"</span></span><br><span class="line"><span class="comment">//参数实例化</span></span><br><span class="line">opts := query.ExecutionOptions&#123;</span><br><span class="line">Database:        db,</span><br><span class="line">RetentionPolicy: r.FormValue(<span class="string">"rp"</span>),</span><br><span class="line">ChunkSize:       chunkSize,</span><br><span class="line">ReadOnly:        r.Method == <span class="string">"GET"</span>,</span><br><span class="line">NodeID:          nodeID,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> h.Config.AuthEnabled &#123;</span><br><span class="line"><span class="comment">// The current user determines the authorized actions.</span></span><br><span class="line">opts.Authorizer = user</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// Auth is disabled, so allow everything.</span></span><br><span class="line">opts.Authorizer = query.OpenAuthorizer</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Make sure if the client disconnects we signal the query to abort</span></span><br><span class="line"><span class="keyword">var</span> closing <span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"><span class="keyword">if</span> !async &#123;</span><br><span class="line">closing = <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;)</span><br><span class="line"><span class="keyword">if</span> notifier, ok := w.(http.CloseNotifier); ok &#123;</span><br><span class="line"><span class="comment">// CloseNotify() is not guaranteed to send a notification when the query</span></span><br><span class="line"><span class="comment">// is closed. Use this channel to signal that the query is finished to</span></span><br><span class="line"><span class="comment">// prevent lingering goroutines that may be stuck.</span></span><br><span class="line">done := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;)</span><br><span class="line"><span class="keyword">defer</span> <span class="built_in">close</span>(done)</span><br><span class="line"></span><br><span class="line">notify := notifier.CloseNotify()</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// Wait for either the request to finish</span></span><br><span class="line"><span class="comment">// or for the client to disconnect</span></span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> &lt;-done:</span><br><span class="line"><span class="keyword">case</span> &lt;-notify:</span><br><span class="line"><span class="built_in">close</span>(closing)</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line">opts.AbortCh = done</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">defer</span> <span class="built_in">close</span>(closing)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Execute query.</span></span><br><span class="line">    <span class="comment">//执行查询语句</span></span><br><span class="line">results := h.QueryExecutor.ExecuteQuery(q, opts, closing)</span><br><span class="line"></span><br><span class="line"><span class="comment">// If we are running in async mode, open a goroutine to drain the results</span></span><br><span class="line"><span class="comment">// and return with a StatusNoContent.</span></span><br><span class="line"><span class="keyword">if</span> async &#123;</span><br><span class="line"><span class="keyword">go</span> h.async(q, results)</span><br><span class="line">h.writeHeader(w, http.StatusNoContent)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// if we're not chunking, this will be the in memory buffer for all results before sending to client</span></span><br><span class="line">resp := Response&#123;Results: <span class="built_in">make</span>([]*query.Result, <span class="number">0</span>)&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Status header is OK once this point is reached.</span></span><br><span class="line"><span class="comment">// Attempt to flush the header immediately so the client gets the header information</span></span><br><span class="line"><span class="comment">// and knows the query was accepted.</span></span><br><span class="line">h.writeHeader(rw, http.StatusOK)</span><br><span class="line"><span class="keyword">if</span> w, ok := w.(http.Flusher); ok &#123;</span><br><span class="line">w.Flush()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// pull all results from the channel</span></span><br><span class="line">rows := <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> r := <span class="keyword">range</span> results &#123;</span><br><span class="line"><span class="comment">// Ignore nil results.</span></span><br><span class="line"><span class="keyword">if</span> r == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// if requested, convert result timestamps to epoch</span></span><br><span class="line"><span class="keyword">if</span> epoch != <span class="string">""</span> &#123;</span><br><span class="line">convertToEpoch(r, epoch)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Write out result immediately if chunked.</span></span><br><span class="line"><span class="keyword">if</span> chunked &#123;</span><br><span class="line">n, _ := rw.WriteResponse(Response&#123;</span><br><span class="line">Results: []*query.Result&#123;r&#125;,</span><br><span class="line">&#125;)</span><br><span class="line">atomic.AddInt64(&amp;h.stats.QueryRequestBytesTransmitted, <span class="keyword">int64</span>(n))</span><br><span class="line">w.(http.Flusher).Flush()</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Limit the number of rows that can be returned in a non-chunked</span></span><br><span class="line"><span class="comment">// response.  This is to prevent the server from going OOM when</span></span><br><span class="line"><span class="comment">// returning a large response.  If you want to return more than the</span></span><br><span class="line"><span class="comment">// default chunk size, then use chunking to process multiple blobs.</span></span><br><span class="line"><span class="comment">// Iterate through the series in this result to count the rows and</span></span><br><span class="line"><span class="comment">// truncate any rows we shouldn't return.</span></span><br><span class="line">        <span class="comment">//最大限制数目</span></span><br><span class="line"><span class="keyword">if</span> h.Config.MaxRowLimit &gt; <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">for</span> i, series := <span class="keyword">range</span> r.Series &#123;</span><br><span class="line">n := h.Config.MaxRowLimit - rows</span><br><span class="line"><span class="keyword">if</span> n &lt; <span class="built_in">len</span>(series.Values) &#123;</span><br><span class="line"><span class="comment">// We have reached the maximum number of values. Truncate</span></span><br><span class="line"><span class="comment">// the values within this row.</span></span><br><span class="line">series.Values = series.Values[:n]</span><br><span class="line"><span class="comment">// Since this was truncated, it will always be a partial return.</span></span><br><span class="line"><span class="comment">// Add this so the client knows we truncated the response.</span></span><br><span class="line">series.Partial = <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line">rows += <span class="built_in">len</span>(series.Values)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> rows &gt;= h.Config.MaxRowLimit &#123;</span><br><span class="line"><span class="comment">// Drop any remaining series since we have already reached the row limit.</span></span><br><span class="line"><span class="keyword">if</span> i &lt; <span class="built_in">len</span>(r.Series) &#123;</span><br><span class="line">r.Series = r.Series[:i+<span class="number">1</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// It's not chunked so buffer results in memory.</span></span><br><span class="line"><span class="comment">// Results for statements need to be combined together.</span></span><br><span class="line"><span class="comment">// We need to check if this new result is for the same statement as</span></span><br><span class="line"><span class="comment">// the last result, or for the next statement</span></span><br><span class="line">l := <span class="built_in">len</span>(resp.Results)</span><br><span class="line"><span class="keyword">if</span> l == <span class="number">0</span> &#123;</span><br><span class="line">resp.Results = <span class="built_in">append</span>(resp.Results, r)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> resp.Results[l<span class="number">-1</span>].StatementID == r.StatementID &#123;</span><br><span class="line"><span class="keyword">if</span> r.Err != <span class="literal">nil</span> &#123;</span><br><span class="line">resp.Results[l<span class="number">-1</span>] = r</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cr := resp.Results[l<span class="number">-1</span>]</span><br><span class="line">rowsMerged := <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(cr.Series) &gt; <span class="number">0</span> &#123;</span><br><span class="line">lastSeries := cr.Series[<span class="built_in">len</span>(cr.Series)<span class="number">-1</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _, row := <span class="keyword">range</span> r.Series &#123;</span><br><span class="line"><span class="keyword">if</span> !lastSeries.SameSeries(row) &#123;</span><br><span class="line"><span class="comment">// Next row is for a different series than last.</span></span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Values are for the same series, so append them.</span></span><br><span class="line">lastSeries.Values = <span class="built_in">append</span>(lastSeries.Values, row.Values...)</span><br><span class="line">rowsMerged++</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Append remaining rows as new rows.</span></span><br><span class="line">r.Series = r.Series[rowsMerged:]</span><br><span class="line">cr.Series = <span class="built_in">append</span>(cr.Series, r.Series...)</span><br><span class="line">cr.Messages = <span class="built_in">append</span>(cr.Messages, r.Messages...)</span><br><span class="line">cr.Partial = r.Partial</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">resp.Results = <span class="built_in">append</span>(resp.Results, r)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Drop out of this loop and do not process further results when we hit the row limit.</span></span><br><span class="line"><span class="keyword">if</span> h.Config.MaxRowLimit &gt; <span class="number">0</span> &amp;&amp; rows &gt;= h.Config.MaxRowLimit &#123;</span><br><span class="line"><span class="comment">// If the result is marked as partial, remove that partial marking</span></span><br><span class="line"><span class="comment">// here. While the series is partial and we would normally have</span></span><br><span class="line"><span class="comment">// tried to return the rest in the next chunk, we are not using</span></span><br><span class="line"><span class="comment">// chunking and are truncating the series so we don't want to</span></span><br><span class="line"><span class="comment">// signal to the client that we plan on sending another JSON blob</span></span><br><span class="line"><span class="comment">// with another result.  The series, on the other hand, still</span></span><br><span class="line"><span class="comment">// returns partial true if it was truncated or had more data to</span></span><br><span class="line"><span class="comment">// send in a future chunk.</span></span><br><span class="line">r.Partial = <span class="literal">false</span></span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// If it's not chunked we buffered everything in memory, so write it out</span></span><br><span class="line"><span class="keyword">if</span> !chunked &#123;</span><br><span class="line">n, _ := rw.WriteResponse(resp)</span><br><span class="line">atomic.AddInt64(&amp;h.stats.QueryRequestBytesTransmitted, <span class="keyword">int64</span>(n))</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>函数ParseQuery函数解析query：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ParseQuery parses an InfluxQL string and returns a Query AST object.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *Parser)</span> <span class="title">ParseQuery</span><span class="params">()</span> <span class="params">(*Query, error)</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> statements Statements</span><br><span class="line">semi := <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="keyword">if</span> tok, pos, lit := p.ScanIgnoreWhitespace(); tok == EOF &#123;<span class="comment">//如果tok==EOF的时候，正常解析完成返回;</span></span><br><span class="line"><span class="keyword">return</span> &amp;Query&#123;Statements: statements&#125;, <span class="literal">nil</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> tok == SEMICOLON &#123;</span><br><span class="line">semi = <span class="literal">true</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> !semi &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, newParseError(tokstr(tok, lit), []<span class="keyword">string</span>&#123;<span class="string">";"</span>&#125;, pos)</span><br><span class="line">&#125;</span><br><span class="line">p.Unscan()</span><br><span class="line">s, err := p.ParseStatement() <span class="comment">//解析词</span></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line">statements = <span class="built_in">append</span>(statements, s) <span class="comment">//返回解析的statments</span></span><br><span class="line">semi = <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行解析的executeQuery函数：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ExecuteQuery executes each statement within a query.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(e *Executor)</span> <span class="title">ExecuteQuery</span><span class="params">(query *influxql.Query, opt ExecutionOptions, closing <span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;)</span> &lt;-<span class="title">chan</span> *<span class="title">Result</span></span> &#123;</span><br><span class="line">results := <span class="built_in">make</span>(<span class="keyword">chan</span> *Result)</span><br><span class="line"><span class="keyword">go</span> e.executeQuery(query, opt, closing, results)  <span class="comment">//执行查询语句</span></span><br><span class="line"><span class="keyword">return</span> results</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用executeQuery函数：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(e *Executor)</span> <span class="title">executeQuery</span><span class="params">(query *influxql.Query, opt ExecutionOptions, closing &lt;-<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;, results <span class="keyword">chan</span> *Result)</span></span> &#123;</span><br><span class="line"><span class="keyword">defer</span> <span class="built_in">close</span>(results)</span><br><span class="line"><span class="keyword">defer</span> e.<span class="built_in">recover</span>(query, results)</span><br><span class="line"></span><br><span class="line">atomic.AddInt64(&amp;e.stats.ActiveQueries, <span class="number">1</span>)</span><br><span class="line">atomic.AddInt64(&amp;e.stats.ExecutedQueries, <span class="number">1</span>)</span><br><span class="line"><span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">(start time.Time)</span></span> &#123;</span><br><span class="line">atomic.AddInt64(&amp;e.stats.ActiveQueries, <span class="number">-1</span>)</span><br><span class="line">atomic.AddInt64(&amp;e.stats.FinishedQueries, <span class="number">1</span>)</span><br><span class="line">atomic.AddInt64(&amp;e.stats.QueryExecutionDuration, time.Since(start).Nanoseconds())</span><br><span class="line">&#125;(time.Now())</span><br><span class="line"><span class="comment">// 使用taskManager来管理查询query,返回一个channel，当query完成running的时候。</span></span><br><span class="line">ctx, detach, err := e.TaskManager.AttachQuery(query, opt, closing)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> results &lt;- &amp;Result&#123;Err: err&#125;:</span><br><span class="line"><span class="keyword">case</span> &lt;-opt.AbortCh:</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> detach()</span><br><span class="line"></span><br><span class="line"><span class="comment">// Setup the execution context that will be used when executing statements.</span></span><br><span class="line">ctx.Results = results</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> i <span class="keyword">int</span></span><br><span class="line">LOOP:</span><br><span class="line"><span class="keyword">for</span> ; i &lt; <span class="built_in">len</span>(query.Statements); i++ &#123;</span><br><span class="line">ctx.statementID = i</span><br><span class="line">stmt := query.Statements[i]</span><br><span class="line"></span><br><span class="line"><span class="comment">// If a default database wasn't passed in by the caller, check the statement.</span></span><br><span class="line">defaultDB := opt.Database</span><br><span class="line"><span class="keyword">if</span> defaultDB == <span class="string">""</span> &#123;</span><br><span class="line"><span class="keyword">if</span> s, ok := stmt.(influxql.HasDefaultDatabase); ok &#123;</span><br><span class="line">defaultDB = s.DefaultDatabase()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Do not let queries manually use the system measurements. If we find</span></span><br><span class="line"><span class="comment">// one, return an error. This prevents a person from using the</span></span><br><span class="line"><span class="comment">// measurement incorrectly and causing a panic.</span></span><br><span class="line"><span class="keyword">if</span> stmt, ok := stmt.(*influxql.SelectStatement); ok &#123;</span><br><span class="line"><span class="keyword">for</span> _, s := <span class="keyword">range</span> stmt.Sources &#123;</span><br><span class="line"><span class="keyword">switch</span> s := s.(<span class="keyword">type</span>) &#123;</span><br><span class="line"><span class="keyword">case</span> *influxql.Measurement:</span><br><span class="line"><span class="keyword">if</span> influxql.IsSystemName(s.Name) &#123;</span><br><span class="line">command := <span class="string">"the appropriate meta command"</span></span><br><span class="line"><span class="keyword">switch</span> s.Name &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"_fieldKeys"</span>:</span><br><span class="line">command = <span class="string">"SHOW FIELD KEYS"</span></span><br><span class="line"><span class="keyword">case</span> <span class="string">"_measurements"</span>:</span><br><span class="line">command = <span class="string">"SHOW MEASUREMENTS"</span></span><br><span class="line"><span class="keyword">case</span> <span class="string">"_series"</span>:</span><br><span class="line">command = <span class="string">"SHOW SERIES"</span></span><br><span class="line"><span class="keyword">case</span> <span class="string">"_tagKeys"</span>:</span><br><span class="line">command = <span class="string">"SHOW TAG KEYS"</span></span><br><span class="line"><span class="keyword">case</span> <span class="string">"_tags"</span>:</span><br><span class="line">command = <span class="string">"SHOW TAG VALUES"</span></span><br><span class="line">&#125;</span><br><span class="line">results &lt;- &amp;Result&#123;</span><br><span class="line">Err: fmt.Errorf(<span class="string">"unable to use system source '%s': use %s instead"</span>, s.Name, command),</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span> LOOP</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Rewrite statements, if necessary.</span></span><br><span class="line"><span class="comment">// This can occur on meta read statements which convert to SELECT statements.</span></span><br><span class="line">newStmt, err := RewriteStatement(stmt)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">results &lt;- &amp;Result&#123;Err: err&#125;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">stmt = newStmt</span><br><span class="line"></span><br><span class="line"><span class="comment">// Normalize each statement if possible.</span></span><br><span class="line"><span class="keyword">if</span> normalizer, ok := e.StatementExecutor.(StatementNormalizer); ok &#123;</span><br><span class="line"><span class="keyword">if</span> err := normalizer.NormalizeStatement(stmt, defaultDB, opt.RetentionPolicy); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">if</span> err := ctx.send(&amp;Result&#123;Err: err&#125;); err == ErrQueryAborted &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Log each normalized statement.</span></span><br><span class="line"><span class="keyword">if</span> !ctx.Quiet &#123;</span><br><span class="line">e.Logger.Info(<span class="string">"Executing query"</span>, zap.Stringer(<span class="string">"query"</span>, stmt))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Send any other statements to the underlying statement executor.</span></span><br><span class="line">err = e.StatementExecutor.ExecuteStatement(stmt, ctx)</span><br><span class="line"><span class="keyword">if</span> err == ErrQueryInterrupted &#123;</span><br><span class="line"><span class="comment">// Query was interrupted so retrieve the real interrupt error from</span></span><br><span class="line"><span class="comment">// the query task if there is one.</span></span><br><span class="line"><span class="keyword">if</span> qerr := ctx.Err(); qerr != <span class="literal">nil</span> &#123;</span><br><span class="line">err = qerr</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Send an error for this result if it failed for some reason.</span></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">if</span> err := ctx.send(&amp;Result&#123;</span><br><span class="line">StatementID: i,</span><br><span class="line">Err:         err,</span><br><span class="line">&#125;); err == ErrQueryAborted &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Stop after the first error.</span></span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Check if the query was interrupted during an uninterruptible statement.</span></span><br><span class="line">interrupted := <span class="literal">false</span></span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> &lt;-ctx.Done():</span><br><span class="line">interrupted = <span class="literal">true</span></span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="comment">// Query has not been interrupted.</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> interrupted &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Send error results for any statements which were not executed.</span></span><br><span class="line"><span class="keyword">for</span> ; i &lt; <span class="built_in">len</span>(query.Statements)<span class="number">-1</span>; i++ &#123;</span><br><span class="line"><span class="keyword">if</span> err := ctx.send(&amp;Result&#123;</span><br><span class="line">StatementID: i,</span><br><span class="line">Err:         ErrNotExecuted,</span><br><span class="line">&#125;); err == ErrQueryAborted &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>函数AttachQuery用于管理当前查询的query的状态</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// AttachQuery attaches a running query to be managed by the TaskManager.</span></span><br><span class="line"><span class="comment">// Returns the query id of the newly attached query or an error if it was</span></span><br><span class="line"><span class="comment">// unable to assign a query id or attach the query to the TaskManager.</span></span><br><span class="line"><span class="comment">// This function also returns a channel that will be closed when this</span></span><br><span class="line"><span class="comment">// query finishes running.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// After a query finishes running, the system is free to reuse a query id.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *TaskManager)</span> <span class="title">AttachQuery</span><span class="params">(q *influxql.Query, opt ExecutionOptions, interrupt &lt;-<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;)</span> <span class="params">(*ExecutionContext, <span class="keyword">func</span>()</span>, <span class="title">error</span>)</span> &#123;</span><br><span class="line">t.mu.Lock()</span><br><span class="line"><span class="keyword">defer</span> t.mu.Unlock()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> t.shutdown &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, <span class="literal">nil</span>, ErrQueryEngineShutdown</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> t.MaxConcurrentQueries &gt; <span class="number">0</span> &amp;&amp; <span class="built_in">len</span>(t.queries) &gt;= t.MaxConcurrentQueries &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, <span class="literal">nil</span>, ErrMaxConcurrentQueriesLimitExceeded(<span class="built_in">len</span>(t.queries), t.MaxConcurrentQueries)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">qid := t.nextID</span><br><span class="line">    <span class="comment">//初始化task</span></span><br><span class="line">query := &amp;Task&#123;</span><br><span class="line">query:     q.String(),</span><br><span class="line">database:  opt.Database,</span><br><span class="line">status:    RunningTask,</span><br><span class="line">startTime: time.Now(),</span><br><span class="line">closing:   <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;),</span><br><span class="line">monitorCh: <span class="built_in">make</span>(<span class="keyword">chan</span> error),</span><br><span class="line">&#125;</span><br><span class="line">t.queries[qid] = query</span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span> t.waitForQuery(qid, query.closing, interrupt, query.monitorCh)<span class="comment">//开启协程来监听query是否结束。</span></span><br><span class="line"><span class="keyword">if</span> t.LogQueriesAfter != <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">go</span> query.monitor(<span class="function"><span class="keyword">func</span><span class="params">(closing &lt;-<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">timer := time.NewTimer(t.LogQueriesAfter)<span class="comment">//检测到慢查询的时候，报警。</span></span><br><span class="line"><span class="keyword">defer</span> timer.Stop()</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> &lt;-timer.C:</span><br><span class="line">t.Logger.Warn(fmt.Sprintf(<span class="string">"Detected slow query: %s (qid: %d, database: %s, threshold: %s)"</span>,</span><br><span class="line">query.query, qid, query.database, t.LogQueriesAfter))</span><br><span class="line"><span class="keyword">case</span> &lt;-closing:</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">t.nextID++</span><br><span class="line">    <span class="comment">//初始化一个ctx上下文</span></span><br><span class="line">ctx := &amp;ExecutionContext&#123;</span><br><span class="line">Context:          context.Background(),</span><br><span class="line">QueryID:          qid,</span><br><span class="line">task:             query,</span><br><span class="line">ExecutionOptions: opt,</span><br><span class="line">&#125;</span><br><span class="line">ctx.watch()</span><br><span class="line">   <span class="comment">// detach query，从查询table中去除。</span></span><br><span class="line"><span class="keyword">return</span> ctx, <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123; t.DetachQuery(qid) &#125;, <span class="literal">nil</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将解析出来的statement执行函数ExecuteStatement</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ExecuteStatement executes the given statement with the given execution context.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(e *StatementExecutor)</span> <span class="title">ExecuteStatement</span><span class="params">(stmt influxql.Statement, ctx *query.ExecutionContext)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="comment">// Select statements are handled separately so that they can be streamed.</span></span><br><span class="line">    <span class="comment">//特殊处理select查询</span></span><br><span class="line"><span class="keyword">if</span> stmt, ok := stmt.(*influxql.SelectStatement); ok &#123;</span><br><span class="line"><span class="keyword">return</span> e.executeSelectStatement(stmt, ctx)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> rows models.Rows</span><br><span class="line"><span class="keyword">var</span> messages []*query.Message</span><br><span class="line"><span class="keyword">var</span> err error</span><br><span class="line"><span class="keyword">switch</span> stmt := stmt.(<span class="keyword">type</span>) &#123;</span><br><span class="line">     <span class="comment">//根据每个类别分别处理不同type的查询语句，有点多，自己看下吧~~~</span></span><br><span class="line"><span class="keyword">case</span> *influxql.AlterRetentionPolicyStatement:</span><br><span class="line"><span class="keyword">if</span> ctx.ReadOnly &#123;</span><br><span class="line">messages = <span class="built_in">append</span>(messages, query.ReadOnlyWarning(stmt.String()))</span><br><span class="line">&#125;</span><br><span class="line">err = e.executeAlterRetentionPolicyStatement(stmt)</span><br><span class="line"><span class="keyword">case</span> *influxql.CreateContinuousQueryStatement:</span><br><span class="line"><span class="keyword">if</span> ctx.ReadOnly &#123;</span><br><span class="line">messages = <span class="built_in">append</span>(messages, query.ReadOnlyWarning(stmt.String()))</span><br><span class="line">&#125;</span><br><span class="line">err = e.executeCreateContinuousQueryStatement(stmt)</span><br><span class="line"><span class="keyword">case</span> *influxql.CreateDatabaseStatement:</span><br><span class="line"><span class="keyword">if</span> ctx.ReadOnly &#123;</span><br><span class="line">messages = <span class="built_in">append</span>(messages, query.ReadOnlyWarning(stmt.String()))</span><br><span class="line">&#125;</span><br><span class="line">err = e.executeCreateDatabaseStatement(stmt)</span><br><span class="line"><span class="keyword">case</span> *influxql.CreateRetentionPolicyStatement:</span><br><span class="line"><span class="keyword">if</span> ctx.ReadOnly &#123;</span><br><span class="line">messages = <span class="built_in">append</span>(messages, query.ReadOnlyWarning(stmt.String()))</span><br><span class="line">&#125;</span><br><span class="line">err = e.executeCreateRetentionPolicyStatement(stmt)</span><br><span class="line"><span class="keyword">case</span> *influxql.CreateSubscriptionStatement:</span><br><span class="line"><span class="keyword">if</span> ctx.ReadOnly &#123;</span><br><span class="line">messages = <span class="built_in">append</span>(messages, query.ReadOnlyWarning(stmt.String()))</span><br><span class="line">&#125;</span><br><span class="line">err = e.executeCreateSubscriptionStatement(stmt)</span><br><span class="line"><span class="keyword">case</span> *influxql.CreateUserStatement:</span><br><span class="line"><span class="keyword">if</span> ctx.ReadOnly &#123;</span><br><span class="line">messages = <span class="built_in">append</span>(messages, query.ReadOnlyWarning(stmt.String()))</span><br><span class="line">&#125;</span><br><span class="line">err = e.executeCreateUserStatement(stmt)</span><br><span class="line"><span class="keyword">case</span> *influxql.DeleteSeriesStatement:</span><br><span class="line">err = e.executeDeleteSeriesStatement(stmt, ctx.Database)</span><br><span class="line"><span class="keyword">case</span> *influxql.DropContinuousQueryStatement:</span><br><span class="line"><span class="keyword">if</span> ctx.ReadOnly &#123;</span><br><span class="line">messages = <span class="built_in">append</span>(messages, query.ReadOnlyWarning(stmt.String()))</span><br><span class="line">&#125;</span><br><span class="line">err = e.executeDropContinuousQueryStatement(stmt)</span><br><span class="line"><span class="keyword">case</span> *influxql.DropDatabaseStatement:</span><br><span class="line"><span class="keyword">if</span> ctx.ReadOnly &#123;</span><br><span class="line">messages = <span class="built_in">append</span>(messages, query.ReadOnlyWarning(stmt.String()))</span><br><span class="line">&#125;</span><br><span class="line">err = e.executeDropDatabaseStatement(stmt)</span><br><span class="line"><span class="keyword">case</span> *influxql.DropMeasurementStatement:</span><br><span class="line"><span class="keyword">if</span> ctx.ReadOnly &#123;</span><br><span class="line">messages = <span class="built_in">append</span>(messages, query.ReadOnlyWarning(stmt.String()))</span><br><span class="line">&#125;</span><br><span class="line">err = e.executeDropMeasurementStatement(stmt, ctx.Database)</span><br><span class="line"><span class="keyword">case</span> *influxql.DropSeriesStatement:</span><br><span class="line"><span class="keyword">if</span> ctx.ReadOnly &#123;</span><br><span class="line">messages = <span class="built_in">append</span>(messages, query.ReadOnlyWarning(stmt.String()))</span><br><span class="line">&#125;</span><br><span class="line">err = e.executeDropSeriesStatement(stmt, ctx.Database)</span><br><span class="line"><span class="keyword">case</span> *influxql.DropRetentionPolicyStatement:</span><br><span class="line"><span class="keyword">if</span> ctx.ReadOnly &#123;</span><br><span class="line">messages = <span class="built_in">append</span>(messages, query.ReadOnlyWarning(stmt.String()))</span><br><span class="line">&#125;</span><br><span class="line">err = e.executeDropRetentionPolicyStatement(stmt)</span><br><span class="line"><span class="keyword">case</span> *influxql.DropShardStatement:</span><br><span class="line"><span class="keyword">if</span> ctx.ReadOnly &#123;</span><br><span class="line">messages = <span class="built_in">append</span>(messages, query.ReadOnlyWarning(stmt.String()))</span><br><span class="line">&#125;</span><br><span class="line">err = e.executeDropShardStatement(stmt)</span><br><span class="line"><span class="keyword">case</span> *influxql.DropSubscriptionStatement:</span><br><span class="line"><span class="keyword">if</span> ctx.ReadOnly &#123;</span><br><span class="line">messages = <span class="built_in">append</span>(messages, query.ReadOnlyWarning(stmt.String()))</span><br><span class="line">&#125;</span><br><span class="line">err = e.executeDropSubscriptionStatement(stmt)</span><br><span class="line"><span class="keyword">case</span> *influxql.DropUserStatement:</span><br><span class="line"><span class="keyword">if</span> ctx.ReadOnly &#123;</span><br><span class="line">messages = <span class="built_in">append</span>(messages, query.ReadOnlyWarning(stmt.String()))</span><br><span class="line">&#125;</span><br><span class="line">err = e.executeDropUserStatement(stmt)</span><br><span class="line"><span class="keyword">case</span> *influxql.ExplainStatement:</span><br><span class="line"><span class="keyword">if</span> stmt.Analyze &#123;</span><br><span class="line">rows, err = e.executeExplainAnalyzeStatement(stmt, ctx)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">rows, err = e.executeExplainStatement(stmt, ctx)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> *influxql.GrantStatement:</span><br><span class="line"><span class="keyword">if</span> ctx.ReadOnly &#123;</span><br><span class="line">messages = <span class="built_in">append</span>(messages, query.ReadOnlyWarning(stmt.String()))</span><br><span class="line">&#125;</span><br><span class="line">err = e.executeGrantStatement(stmt)</span><br><span class="line"><span class="keyword">case</span> *influxql.GrantAdminStatement:</span><br><span class="line"><span class="keyword">if</span> ctx.ReadOnly &#123;</span><br><span class="line">messages = <span class="built_in">append</span>(messages, query.ReadOnlyWarning(stmt.String()))</span><br><span class="line">&#125;</span><br><span class="line">err = e.executeGrantAdminStatement(stmt)</span><br><span class="line"><span class="keyword">case</span> *influxql.RevokeStatement:</span><br><span class="line"><span class="keyword">if</span> ctx.ReadOnly &#123;</span><br><span class="line">messages = <span class="built_in">append</span>(messages, query.ReadOnlyWarning(stmt.String()))</span><br><span class="line">&#125;</span><br><span class="line">err = e.executeRevokeStatement(stmt)</span><br><span class="line"><span class="keyword">case</span> *influxql.RevokeAdminStatement:</span><br><span class="line"><span class="keyword">if</span> ctx.ReadOnly &#123;</span><br><span class="line">messages = <span class="built_in">append</span>(messages, query.ReadOnlyWarning(stmt.String()))</span><br><span class="line">&#125;</span><br><span class="line">err = e.executeRevokeAdminStatement(stmt)</span><br><span class="line"><span class="keyword">case</span> *influxql.ShowContinuousQueriesStatement:</span><br><span class="line">rows, err = e.executeShowContinuousQueriesStatement(stmt)</span><br><span class="line"><span class="keyword">case</span> *influxql.ShowDatabasesStatement:</span><br><span class="line">rows, err = e.executeShowDatabasesStatement(stmt, ctx)</span><br><span class="line"><span class="keyword">case</span> *influxql.ShowDiagnosticsStatement:</span><br><span class="line">rows, err = e.executeShowDiagnosticsStatement(stmt)</span><br><span class="line"><span class="keyword">case</span> *influxql.ShowGrantsForUserStatement:</span><br><span class="line">rows, err = e.executeShowGrantsForUserStatement(stmt)</span><br><span class="line"><span class="keyword">case</span> *influxql.ShowMeasurementsStatement:</span><br><span class="line"><span class="keyword">return</span> e.executeShowMeasurementsStatement(stmt, ctx)</span><br><span class="line"><span class="keyword">case</span> *influxql.ShowMeasurementCardinalityStatement:</span><br><span class="line">rows, err = e.executeShowMeasurementCardinalityStatement(stmt)</span><br><span class="line"><span class="keyword">case</span> *influxql.ShowRetentionPoliciesStatement:</span><br><span class="line">rows, err = e.executeShowRetentionPoliciesStatement(stmt)</span><br><span class="line"><span class="keyword">case</span> *influxql.ShowSeriesCardinalityStatement:</span><br><span class="line">rows, err = e.executeShowSeriesCardinalityStatement(stmt)</span><br><span class="line"><span class="keyword">case</span> *influxql.ShowShardsStatement:</span><br><span class="line">rows, err = e.executeShowShardsStatement(stmt)</span><br><span class="line"><span class="keyword">case</span> *influxql.ShowShardGroupsStatement:</span><br><span class="line">rows, err = e.executeShowShardGroupsStatement(stmt)</span><br><span class="line"><span class="keyword">case</span> *influxql.ShowStatsStatement:</span><br><span class="line">rows, err = e.executeShowStatsStatement(stmt)</span><br><span class="line"><span class="keyword">case</span> *influxql.ShowSubscriptionsStatement:</span><br><span class="line">rows, err = e.executeShowSubscriptionsStatement(stmt)</span><br><span class="line"><span class="keyword">case</span> *influxql.ShowTagKeysStatement:</span><br><span class="line"><span class="keyword">return</span> e.executeShowTagKeys(stmt, ctx)</span><br><span class="line"><span class="keyword">case</span> *influxql.ShowTagValuesStatement:</span><br><span class="line"><span class="keyword">return</span> e.executeShowTagValues(stmt, ctx)</span><br><span class="line"><span class="keyword">case</span> *influxql.ShowUsersStatement:</span><br><span class="line">rows, err = e.executeShowUsersStatement(stmt)</span><br><span class="line"><span class="keyword">case</span> *influxql.SetPasswordUserStatement:</span><br><span class="line"><span class="keyword">if</span> ctx.ReadOnly &#123;</span><br><span class="line">messages = <span class="built_in">append</span>(messages, query.ReadOnlyWarning(stmt.String()))</span><br><span class="line">&#125;</span><br><span class="line">err = e.executeSetPasswordUserStatement(stmt)</span><br><span class="line"><span class="keyword">case</span> *influxql.ShowQueriesStatement, *influxql.KillQueryStatement:</span><br><span class="line"><span class="comment">// Send query related statements to the task manager.</span></span><br><span class="line"><span class="keyword">return</span> e.TaskManager.ExecuteStatement(stmt, ctx)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">return</span> query.ErrInvalidQuery</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> ctx.Send(&amp;query.Result&#123;</span><br><span class="line">Series:   rows,</span><br><span class="line">Messages: messages,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>针对不同类型的statment执行不同的查询tsdb过程。以select查询为例。，executeSelectStatement单独处理，为了能够streamed。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(e *StatementExecutor)</span> <span class="title">executeSelectStatement</span><span class="params">(stmt *influxql.SelectStatement, ctx *query.ExecutionContext)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="comment">//创建迭代器</span></span><br><span class="line">    cur, err := e.createIterators(ctx, stmt, ctx.ExecutionOptions)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Generate a row emitter from the iterator set.</span></span><br><span class="line">    <span class="comment">// 从迭代器中生成一个row emitter，chunkSize大小。</span></span><br><span class="line">em := query.NewEmitter(cur, ctx.ChunkSize)</span><br><span class="line"><span class="keyword">defer</span> em.Close()</span><br><span class="line"></span><br><span class="line"><span class="comment">// Emit rows to the results channel.</span></span><br><span class="line"><span class="keyword">var</span> writeN <span class="keyword">int64</span></span><br><span class="line"><span class="keyword">var</span> emitted <span class="keyword">bool</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> pointsWriter *BufferedPointsWriter</span><br><span class="line"><span class="keyword">if</span> stmt.Target != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="comment">//初始化</span></span><br><span class="line">pointsWriter = NewBufferedPointsWriter(e.PointsWriter, stmt.Target.Measurement.Database, stmt.Target.Measurement.RetentionPolicy, <span class="number">10000</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">        <span class="comment">// 查询数据</span></span><br><span class="line">row, partial, err := em.Emit()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> row == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="comment">// Check if the query was interrupted while emitting.</span></span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> &lt;-ctx.Done():</span><br><span class="line"><span class="keyword">return</span> ctx.Err()</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Write points back into system for INTO statements.</span></span><br><span class="line">        <span class="comment">// INTO不为空，则写入这个pointswriter</span></span><br><span class="line"><span class="keyword">if</span> stmt.Target != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">if</span> err := e.writeInto(pointsWriter, stmt, row); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">writeN += <span class="keyword">int64</span>(<span class="built_in">len</span>(row.Values))</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">result := &amp;query.Result&#123;</span><br><span class="line">Series:  []*models.Row&#123;row&#125;,</span><br><span class="line">Partial: partial,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Send results or exit if closing.</span></span><br><span class="line">        <span class="comment">//发送结果</span></span><br><span class="line"><span class="keyword">if</span> err := ctx.Send(result); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">emitted = <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Flush remaining points and emit write count if an INTO statement.</span></span><br><span class="line"><span class="keyword">if</span> stmt.Target != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">if</span> err := pointsWriter.Flush(); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> messages []*query.Message</span><br><span class="line"><span class="keyword">if</span> ctx.ReadOnly &#123;</span><br><span class="line">messages = <span class="built_in">append</span>(messages, query.ReadOnlyWarning(stmt.String()))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> ctx.Send(&amp;query.Result&#123;</span><br><span class="line">Messages: messages,</span><br><span class="line">Series: []*models.Row&#123;&#123;</span><br><span class="line">Name:    <span class="string">"result"</span>,</span><br><span class="line">Columns: []<span class="keyword">string</span>&#123;<span class="string">"time"</span>, <span class="string">"written"</span>&#125;,</span><br><span class="line">Values:  [][]<span class="keyword">interface</span>&#123;&#125;&#123;&#123;time.Unix(<span class="number">0</span>, <span class="number">0</span>).UTC(), writeN&#125;&#125;,</span><br><span class="line">&#125;&#125;,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Always emit at least one result.</span></span><br><span class="line"><span class="keyword">if</span> !emitted &#123;</span><br><span class="line"><span class="keyword">return</span> ctx.Send(&amp;query.Result&#123;</span><br><span class="line">Series: <span class="built_in">make</span>([]*models.Row, <span class="number">0</span>),</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>emit函数查询获取数据并返回:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Emit returns the next row from the iterators.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(e *Emitter)</span> <span class="title">Emit</span><span class="params">()</span> <span class="params">(*models.Row, <span class="keyword">bool</span>, error)</span></span> &#123;</span><br><span class="line"><span class="comment">// Continually read from the cursor until it is exhausted.</span></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="comment">// Scan the next row. If there are no rows left, return the current row.</span></span><br><span class="line"><span class="keyword">var</span> row Row</span><br><span class="line"><span class="keyword">if</span> !e.cur.Scan(&amp;row) &#123;</span><br><span class="line"><span class="keyword">if</span> err := e.cur.Err(); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, <span class="literal">false</span>, err</span><br><span class="line">&#125;</span><br><span class="line">r := e.row</span><br><span class="line">e.row = <span class="literal">nil</span></span><br><span class="line"><span class="keyword">return</span> r, <span class="literal">false</span>, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// If there's no row yet then create one.</span></span><br><span class="line"><span class="comment">// If the name and tags match the existing row, append to that row if</span></span><br><span class="line"><span class="comment">// the number of values doesn't exceed the chunk size.</span></span><br><span class="line"><span class="comment">// Otherwise return existing row and add values to next emitted row.</span></span><br><span class="line"><span class="keyword">if</span> e.row == <span class="literal">nil</span> &#123;</span><br><span class="line">e.createRow(row.Series, row.Values)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> e.series.SameSeries(row.Series) &#123;</span><br><span class="line"><span class="keyword">if</span> e.chunkSize &gt; <span class="number">0</span> &amp;&amp; <span class="built_in">len</span>(e.row.Values) &gt;= e.chunkSize &#123;<span class="comment">//如果查询数据量大于chunkSize，则返回，同时 partial=true标识。</span></span><br><span class="line">r := e.row</span><br><span class="line">r.Partial = <span class="literal">true</span></span><br><span class="line">e.createRow(row.Series, row.Values)</span><br><span class="line"><span class="keyword">return</span> r, <span class="literal">true</span>, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line">e.row.Values = <span class="built_in">append</span>(e.row.Values, row.Values)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">r := e.row</span><br><span class="line">e.createRow(row.Series, row.Values)</span><br><span class="line"><span class="keyword">return</span> r, <span class="literal">true</span>, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>大概看了下influxdb从启动到服务查询接口的整体流程。以select为例，看了不同的query查询和解析方式类似，都需要走解析查询的。词法解析器是 influxdb自己写的。 底层如何构建的以后再讨论吧。还有很多细节需要自己去看下了。orz</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;influxdb-启动流程学习笔记&quot;&gt;&lt;a href=&quot;#influxdb-启动流程学习笔记&quot; class=&quot;headerlink&quot; title=&quot;influxdb 启动流程学习笔记&quot;&gt;&lt;/a&gt;influxdb 启动流程学习笔记&lt;/h3&gt;&lt;h4 id=&quot;流程分析&quot;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>gotips</title>
    <link href="http://www.mydreamdll.xyz/2020/01/17/gotips/"/>
    <id>http://www.mydreamdll.xyz/2020/01/17/gotips/</id>
    <published>2020-01-17T02:16:09.017Z</published>
    <updated>2020-01-17T02:15:04.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="golang超时问题"><a href="#golang超时问题" class="headerlink" title="golang超时问题"></a>golang超时问题</h2><p>golang中http请求经常遇到的问题，本人也遇到过超时的情况。写个笔记记录下。</p><p>当在编写一个Go语言的HTTP服务端或者是客户端时，超时是最容易同时也是最敏感的错误，有很多选择，一个错误可以导致很长时间没有结果，知道网络出现故障，或者进程宕掉。</p><p>在分析过程中，发现服务之间调用有EOF的问题，一般情况下是两个服务之间的readtimeout和writetimeout设置超时导致的。当然也有一个keepalive超时的问题。需要保证服务A调用服务B的时候，服务A的keepalive大于服务B的keepalive。</p><p>python服务器gunicon在设置keepalive的时候，之前遇到过默认情况的keepalive时间给了5s钟，遇到服务A的keepalive时间大于60s的时候，可能服务B的连接已经断开了，但是服务A还维持的会话，当获取数据的时候发现读取数据失败返回EOF问题了。</p><p>建议保证：服务B的Keepalive时间 &gt; 服务A的keepalive时间</p><p><img src="http://img.kuqin.com/upimg/allimg/160720/2036151E2-0.png" alt="HTTP server phases"></p><p><img src="http://img.kuqin.com/upimg/allimg/160720/2036154434-1.png" alt="HTTP Client phases"></p><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="https://studygolang.com/articles/7692" target="_blank" rel="noopener">https://studygolang.com/articles/7692</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;golang超时问题&quot;&gt;&lt;a href=&quot;#golang超时问题&quot; class=&quot;headerlink&quot; title=&quot;golang超时问题&quot;&gt;&lt;/a&gt;golang超时问题&lt;/h2&gt;&lt;p&gt;golang中http请求经常遇到的问题，本人也遇到过超时的情况。写个笔记记
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>monit学习</title>
    <link href="http://www.mydreamdll.xyz/2020/01/16/monit%E5%AD%A6%E4%B9%A0/"/>
    <id>http://www.mydreamdll.xyz/2020/01/16/monit%E5%AD%A6%E4%B9%A0/</id>
    <published>2020-01-16T10:19:25.146Z</published>
    <updated>2020-01-16T10:19:25.146Z</updated>
    
    <content type="html"><![CDATA[<h2 id="monit代码分析"><a href="#monit代码分析" class="headerlink" title="monit代码分析"></a>monit代码分析</h2><p>主要流程main函数:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The Prime mover</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span> </span>&#123;</span><br><span class="line">        Bootstrap(); <span class="comment">// Bootstrap libmonit  //初始化代码</span></span><br><span class="line">        Bootstrap_setAbortHandler(vLogAbortHandler);  <span class="comment">// Abort Monit on exceptions thrown by libmonit</span></span><br><span class="line">        Bootstrap_setErrorHandler(vLogError);</span><br><span class="line">        setlocale(LC_ALL, <span class="string">"C"</span>);</span><br><span class="line">        prog = File_basename(argv[<span class="number">0</span>]);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> HAVE_OPENSSL</span></span><br><span class="line">        Ssl_start();</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">        init_env();</span><br><span class="line">        handle_options(argc, argv);</span><br><span class="line">        do_init();</span><br><span class="line">        do_action(argc, argv);</span><br><span class="line">        do_exit(<span class="literal">false</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Bootstrap函数：</p> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Bootstrap:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Bootstrap</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">        Exception_init();</span><br><span class="line">        Thread_init();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Ssl_start函数，加载ssl协议</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Ssl_start</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> (OPENSSL_VERSION_NUMBER &lt; 0x10100000L) || defined(LIBRESSL_VERSION_NUMBER)</span></span><br><span class="line">        SSL_library_init();</span><br><span class="line">        SSL_load_error_strings();</span><br><span class="line">        <span class="keyword">int</span> locks = CRYPTO_num_locks();</span><br><span class="line">        instanceMutexTable = CALLOC(locks, <span class="keyword">sizeof</span>(Mutex_T));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; locks; i++)</span><br><span class="line">                Mutex_init(instanceMutexTable[i]);</span><br><span class="line">        CRYPTO_THREADID_set_callback(_threadID);</span><br><span class="line">        CRYPTO_set_locking_callback(_mutexLock);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">        <span class="keyword">if</span> (File_exist(URANDOM_DEVICE))</span><br><span class="line">                RAND_load_file(URANDOM_DEVICE, RANDOM_BYTES);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (File_exist(RANDOM_DEVICE))</span><br><span class="line">                RAND_load_file(RANDOM_DEVICE, RANDOM_BYTES);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">                THROW(AssertException, <span class="string">"SSL: cannot find %s nor %s on the system"</span>, URANDOM_DEVICE, RANDOM_DEVICE);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>初始化环境：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Initialize the program environment</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @see https://bitbucket.org/tildeslash/monit/commits/cd545838378517f84bdb0989cadf461a19d8ba11</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init_env</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Util_closeFds();</span><br><span class="line">        <span class="comment">// Ensure that std descriptors (0, 1 and 2) are open</span></span><br><span class="line">        <span class="keyword">int</span> devnull = <span class="built_in">open</span>(<span class="string">"/dev/null"</span>, O_RDWR);</span><br><span class="line">        <span class="keyword">if</span> (devnull == <span class="number">-1</span>) &#123;</span><br><span class="line">                THROW(AssertException, <span class="string">"Cannot open /dev/null -- %s"</span>, STRERROR);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">                <span class="class"><span class="keyword">struct</span> <span class="title">stat</span> <span class="title">st</span>;</span></span><br><span class="line">                <span class="keyword">if</span> (fstat(i, &amp;st) == <span class="number">-1</span>) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (dup2(devnull, i) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                                <span class="built_in">close</span>(devnull);</span><br><span class="line">                                THROW(AssertException, <span class="string">"dup2 failed -- %s"</span>, STRERROR);</span><br><span class="line">                        &#125;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">close</span>(devnull);</span><br><span class="line">        <span class="comment">// Get password struct with user info</span></span><br><span class="line">        <span class="keyword">char</span> buf[<span class="number">4096</span>];</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">passwd</span> <span class="title">pw</span>, *<span class="title">result</span> = <span class="title">NULL</span>;</span></span><br><span class="line">        <span class="keyword">if</span> (getpwuid_r(geteuid(), &amp;pw, buf, <span class="keyword">sizeof</span>(buf), &amp;result) != <span class="number">0</span> || ! result)</span><br><span class="line">                THROW(AssertException, <span class="string">"getpwuid_r failed -- %s"</span>, STRERROR);</span><br><span class="line">        Run.Env.<span class="built_in">home</span> = Str_dup(pw.pw_dir);</span><br><span class="line">        Run.Env.user = Str_dup(pw.pw_name);</span><br><span class="line">        <span class="comment">// Get CWD</span></span><br><span class="line">        <span class="keyword">char</span> t[PATH_MAX];</span><br><span class="line">        <span class="keyword">if</span> (! Dir_cwd(t, PATH_MAX))</span><br><span class="line">                THROW(AssertException, <span class="string">"Monit: Cannot read current directory -- %s"</span>, STRERROR);</span><br><span class="line">        Run.Env.cwd = Str_dup(t);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>handle_options函数处理传参情况：</p><p>do_init函数初始化文件和服务</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Initialize this application - Register signal handlers,</span></span><br><span class="line"><span class="comment"> * Parse the control file and initialize the program's</span></span><br><span class="line"><span class="comment"> * datastructures and the log system.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">do_init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * Register interest for the SIGTERM signal,</span></span><br><span class="line"><span class="comment">         * in case we run in daemon mode this signal</span></span><br><span class="line"><span class="comment">         * will terminate a running daemon.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        signal(SIGTERM, do_destroy);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * Register interest for the SIGUSER1 signal,</span></span><br><span class="line"><span class="comment">         * in case we run in daemon mode this signal</span></span><br><span class="line"><span class="comment">         * will wakeup a sleeping daemon.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        signal(SIGUSR1, do_wakeup);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * Register interest for the SIGINT signal,</span></span><br><span class="line"><span class="comment">         * in case we run as a server but not as a daemon</span></span><br><span class="line"><span class="comment">         * we need to catch this signal if the user pressed</span></span><br><span class="line"><span class="comment">         * CTRL^C in the terminal</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        signal(SIGINT, do_destroy);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * Register interest for the SIGHUP signal,</span></span><br><span class="line"><span class="comment">         * in case we run in daemon mode this signal</span></span><br><span class="line"><span class="comment">         * will reload the configuration.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        signal(SIGHUP, do_reload);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * Register no interest for the SIGPIPE signal,</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        signal(SIGPIPE, SIG_IGN);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * Initialize the random number generator</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        srandom((<span class="keyword">unsigned</span>)(Time_now() + getpid()));</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * Initialize the Runtime mutex. This mutex</span></span><br><span class="line"><span class="comment">         * is used to synchronize handling of global</span></span><br><span class="line"><span class="comment">         * service data</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Mutex_init(Run.mutex);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * Initialize heartbeat mutex and condition</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Mutex_init(heartbeatMutex);</span><br><span class="line">        Sem_init(heartbeatCond);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * Get the position of the control file</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">if</span> (! Run.files.control)</span><br><span class="line">                Run.files.control = file_findControlFile();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * Initialize the system information data collecting interface</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">if</span> (init_system_info())</span><br><span class="line">                Run.flags |= Run_ProcessEngineEnabled;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * Start the Parser and create the service list. This will also set</span></span><br><span class="line"><span class="comment">         * any Runtime constants defined in the controlfile.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">if</span> (! parse(Run.files.control))</span><br><span class="line">                <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * Initialize the log system</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">if</span> (! log_init())</span><br><span class="line">                <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * Did we find any service ?</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">if</span> (! servicelist) &#123;</span><br><span class="line">                LogError(<span class="string">"No service has been specified\n"</span>);</span><br><span class="line">                <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * Initialize Runtime file variables</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        file_init();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * Should we print debug information ?</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">if</span> (Run.debug) &#123;</span><br><span class="line">                Util_printRunList();</span><br><span class="line">                Util_printServiceList();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * Reap any stray child processes we may have created</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        atexit(waitforchildren);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>file_findControlFile()函数，读取配置文件，corefoundation</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">char</span> *<span class="title">file_findControlFile</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">char</span> *rcfile = CALLOC(<span class="keyword">sizeof</span>(<span class="keyword">char</span>), STRLEN + <span class="number">1</span>);</span><br><span class="line">        <span class="built_in">snprintf</span>(rcfile, STRLEN, <span class="string">"%s/.%s"</span>, Run.Env.<span class="built_in">home</span>, MONITRC);</span><br><span class="line">        <span class="keyword">if</span> (File_exist(rcfile)) &#123;</span><br><span class="line">                <span class="keyword">return</span> rcfile;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">snprintf</span>(rcfile, STRLEN, <span class="string">"/etc/%s"</span>, MONITRC);</span><br><span class="line">        <span class="keyword">if</span> (File_exist(rcfile)) &#123;</span><br><span class="line">                <span class="keyword">return</span> rcfile;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">snprintf</span>(rcfile, STRLEN, <span class="string">"%s/%s"</span>, SYSCONFDIR, MONITRC);</span><br><span class="line">        <span class="keyword">if</span> (File_exist(rcfile)) &#123;</span><br><span class="line">                <span class="keyword">return</span> rcfile;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">snprintf</span>(rcfile, STRLEN, <span class="string">"/usr/local/etc/%s"</span>, MONITRC);</span><br><span class="line">        <span class="keyword">if</span> (File_exist(rcfile)) &#123;</span><br><span class="line">                <span class="keyword">return</span> rcfile;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (File_exist(MONITRC)) &#123;</span><br><span class="line">                <span class="built_in">snprintf</span>(rcfile, STRLEN, <span class="string">"%s/%s"</span>, Run.Env.cwd, MONITRC);</span><br><span class="line">                <span class="keyword">return</span> rcfile;</span><br><span class="line">        &#125;</span><br><span class="line">        LogError(<span class="string">"Cannot find the Monit control file at ~/.%s, /etc/%s, %s/%s, /usr/local/etc/%s or at ./%s \n"</span>, MONITRC, MONITRC, SYSCONFDIR, MONITRC, MONITRC, MONITRC);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>do_action主流程:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Dispatch to the submitted action - actions are program arguments</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">do_action</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">char</span> *action = args[optind];</span><br><span class="line"></span><br><span class="line">        Run.flags |= Run_Once;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (! action) &#123;</span><br><span class="line">                do_default();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (IS(action, <span class="string">"start"</span>)     ||</span><br><span class="line">                   IS(action, <span class="string">"stop"</span>)      ||</span><br><span class="line">                   IS(action, <span class="string">"monitor"</span>)   ||</span><br><span class="line">                   IS(action, <span class="string">"unmonitor"</span>) ||</span><br><span class="line">                   IS(action, <span class="string">"restart"</span>)) &#123;</span><br><span class="line">                <span class="keyword">char</span> *service = args[++optind];</span><br><span class="line">                <span class="keyword">if</span> (Run.mygroup || service) &#123;</span><br><span class="line">                        <span class="keyword">int</span> errors = <span class="number">0</span>;</span><br><span class="line">                        List_T services = List_new();</span><br><span class="line">                        <span class="keyword">if</span> (Run.mygroup) &#123;</span><br><span class="line">                                <span class="keyword">for</span> (ServiceGroup_T sg = servicegrouplist; sg; sg = sg-&gt;next) &#123;</span><br><span class="line">                                        <span class="keyword">if</span> (IS(Run.mygroup, sg-&gt;name)) &#123;</span><br><span class="line">                                                <span class="keyword">for</span> (<span class="keyword">list_t</span> m = sg-&gt;members-&gt;head; m; m = m-&gt;next) &#123;</span><br><span class="line">                                                        Service_T s = m-&gt;e;</span><br><span class="line">                                                        List_append(services, s-&gt;name);</span><br><span class="line">                                                &#125;</span><br><span class="line">                                                <span class="keyword">break</span>;</span><br><span class="line">                                        &#125;</span><br><span class="line">                                &#125;</span><br><span class="line">                                <span class="keyword">if</span> (List_length(services) == <span class="number">0</span>) &#123;</span><br><span class="line">                                        List_free(&amp;services);</span><br><span class="line">                                        LogError(<span class="string">"Group '%s' not found\n"</span>, Run.mygroup);</span><br><span class="line">                                        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">                                &#125;</span><br><span class="line">                        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (IS(service, <span class="string">"all"</span>)) &#123;</span><br><span class="line">                                <span class="keyword">for</span> (Service_T s = servicelist; s; s = s-&gt;next)</span><br><span class="line">                                        List_append(services, s-&gt;name);</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                List_append(services, service);</span><br><span class="line">                        &#125;</span><br><span class="line">                        errors = exist_daemon() ? (HttpClient_action(action, services) ? <span class="number">0</span> : <span class="number">1</span>) : control_service_string(services, action);</span><br><span class="line">                        List_free(&amp;services);</span><br><span class="line">                        <span class="keyword">if</span> (errors)</span><br><span class="line">                                <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        LogError(<span class="string">"Please specify a service name or 'all' after %s\n"</span>, action);</span><br><span class="line">                        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (IS(action, <span class="string">"reload"</span>)) &#123;</span><br><span class="line">                LogInfo(<span class="string">"Reinitializing %s daemon\n"</span>, prog);</span><br><span class="line">                kill_daemon(SIGHUP);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (IS(action, <span class="string">"status"</span>)) &#123;</span><br><span class="line">                <span class="keyword">char</span> *service = args[++optind];</span><br><span class="line">                <span class="keyword">if</span> (! HttpClient_status(Run.mygroup, service))</span><br><span class="line">                        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (IS(action, <span class="string">"summary"</span>)) &#123;</span><br><span class="line">                <span class="keyword">char</span> *service = args[++optind];</span><br><span class="line">                <span class="keyword">if</span> (! HttpClient_summary(Run.mygroup, service))</span><br><span class="line">                        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (IS(action, <span class="string">"report"</span>)) &#123;</span><br><span class="line">                <span class="keyword">char</span> *type = args[++optind];</span><br><span class="line">                <span class="keyword">if</span> (! HttpClient_report(type))</span><br><span class="line">                        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (IS(action, <span class="string">"procmatch"</span>)) &#123;</span><br><span class="line">                <span class="keyword">char</span> *pattern = args[++optind];</span><br><span class="line">                <span class="keyword">if</span> (! pattern) &#123;</span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">"Invalid syntax - usage: procmatch \"&lt;pattern&gt;\"\n"</span>);</span><br><span class="line">                        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                ProcessTree_testMatch(pattern);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (IS(action, <span class="string">"quit"</span>)) &#123;</span><br><span class="line">                kill_daemon(SIGTERM);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (IS(action, <span class="string">"validate"</span>)) &#123;</span><br><span class="line">                <span class="keyword">if</span> (do_wakeupcall()) &#123;</span><br><span class="line">                        <span class="keyword">char</span> *service = args[++optind];</span><br><span class="line">                        HttpClient_status(Run.mygroup, service);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        _validateOnce();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                LogError(<span class="string">"Invalid argument -- %s  (-h will show valid arguments)\n"</span>, action);</span><br><span class="line">                <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>action= start stop monitor unmonitor restart 通过维护一个服务列表发送post请求给服务端来启动服务。</p><p>do_default主要启动服务的函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Default action - become a daemon if defined in the Run object and</span></span><br><span class="line"><span class="comment"> * run validate() between sleeps. If not, just run validate() once.</span></span><br><span class="line"><span class="comment"> * Also, if specified, start the monit http server if in deamon mode.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">do_default</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (Run.flags &amp; Run_Daemon) &#123;</span><br><span class="line">                <span class="keyword">if</span> (do_wakeupcall())</span><br><span class="line">                        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">                Run.flags &amp;= ~Run_Once;</span><br><span class="line">                <span class="keyword">if</span> (can_http()) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (Run.httpd.flags &amp; Httpd_Net)</span><br><span class="line">                                LogInfo(<span class="string">"Starting Monit %s daemon with http interface at [%s]:%d\n"</span>, VERSION, Run.httpd.socket.net.address ? Run.httpd.socket.net.address : <span class="string">"*"</span>, Run.httpd.socket.net.port);</span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span> (Run.httpd.flags &amp; Httpd_Unix)</span><br><span class="line">                                LogInfo(<span class="string">"Starting Monit %s daemon with http interface at %s\n"</span>, VERSION, Run.httpd.socket.unix.path);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        LogInfo(<span class="string">"Starting Monit %s daemon\n"</span>, VERSION);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (! (Run.flags &amp; Run_Foreground))</span><br><span class="line">                        daemonize();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (! file_createPidFile(Run.files.pid)) &#123;</span><br><span class="line">                        LogError(<span class="string">"Monit daemon died\n"</span>);</span><br><span class="line">                        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (! State_open())</span><br><span class="line">                        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">                State_restore();</span><br><span class="line"></span><br><span class="line">                atexit(file_finalize);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (Run.startdelay &amp;&amp; State_reboot()) &#123;</span><br><span class="line">                        <span class="keyword">time_t</span> now = Time_now();</span><br><span class="line">                        <span class="keyword">time_t</span> <span class="built_in">delay</span> = now + Run.startdelay;</span><br><span class="line"></span><br><span class="line">                        LogInfo(<span class="string">"Monit will delay for %ds on first start after reboot ...\n"</span>, Run.startdelay);</span><br><span class="line"></span><br><span class="line">                        <span class="comment">/* sleep can be interrupted by signal =&gt; make sure we paused long enough */</span></span><br><span class="line">                        <span class="keyword">while</span> (now &lt; <span class="built_in">delay</span>) &#123;</span><br><span class="line">                                sleep((<span class="keyword">unsigned</span> <span class="keyword">int</span>)(<span class="built_in">delay</span> - now));</span><br><span class="line">                                <span class="keyword">if</span> (Run.flags &amp; Run_Stopped)</span><br><span class="line">                                        do_exit(<span class="literal">false</span>);</span><br><span class="line">                                now = Time_now();</span><br><span class="line">                        &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (can_http())</span><br><span class="line">                        monit_http(Httpd_Start);</span><br><span class="line"></span><br><span class="line">                <span class="comment">/* send the monit startup notification */</span></span><br><span class="line">                Event_post(Run.system, Event_Instance, State_Changed, Run.system-&gt;action_MONIT_START, <span class="string">"Monit %s started"</span>, VERSION);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (Run.mmonits) &#123;</span><br><span class="line">                        Thread_create(heartbeatThread, heartbeat, <span class="literal">NULL</span>);</span><br><span class="line">                        heartbeatRunning = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                        validate();</span><br><span class="line"></span><br><span class="line">                        <span class="comment">/* In the case that there is no pending action then sleep */</span></span><br><span class="line">                        <span class="keyword">if</span> (! (Run.flags &amp; Run_ActionPending) &amp;&amp; ! interrupt())</span><br><span class="line">                                sleep(Run.polltime);</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">if</span> (Run.flags &amp; Run_DoWakeup) &#123;</span><br><span class="line">                                Run.flags &amp;= ~Run_DoWakeup;</span><br><span class="line">                                LogInfo(<span class="string">"Awakened by User defined signal 1\n"</span>);</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">if</span> (Run.flags &amp; Run_Stopped) &#123;</span><br><span class="line">                                do_exit(<span class="literal">true</span>);</span><br><span class="line">                        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Run.flags &amp; Run_DoReload) &#123;</span><br><span class="line">                                do_reinit();</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                State_saveIfDirty();</span><br><span class="line">                        &#125;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                _validateOnce();</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>do_wakeupcall调用函数是否需要唤醒进程。</p><p>can_http()判断是否可以启动http.</p><p>daemonize()函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Transform a program into a daemon. Inspired by code from Stephen</span></span><br><span class="line"><span class="comment"> * A. Rago's book, Unix System V Network Programming.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">daemonize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">pid_t</span> pid;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * Become a session leader to lose our controlling terminal</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">if</span> ((pid = fork ()) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                LogError(<span class="string">"Cannot fork a new process\n"</span>);</span><br><span class="line">                <span class="built_in">exit</span> (<span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (pid != <span class="number">0</span>) &#123;</span><br><span class="line">                _exit(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        setsid();</span><br><span class="line">        <span class="keyword">if</span> ((pid = fork ()) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                LogError(<span class="string">"Cannot fork a new process\n"</span>);</span><br><span class="line">                <span class="built_in">exit</span> (<span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (pid != <span class="number">0</span>) &#123;</span><br><span class="line">                _exit(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * Change current directory to the root so that other file systems can be unmounted while we're running</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">if</span> (chdir(<span class="string">"/"</span>) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                LogError(<span class="string">"Cannot chdir to / -- %s\n"</span>, STRERROR);</span><br><span class="line">                <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * Attach standard descriptors to /dev/null. Other descriptors should be closed in env.c</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Util_redirectStdFds();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>file_createPidFile场景pid文件。</p><p>服务数据结构，所有的服务数据结构都在monit.h文件中</p><p>yacc flex解析</p><p>使用flex词法解析器，yacc语法解析器。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;monit代码分析&quot;&gt;&lt;a href=&quot;#monit代码分析&quot; class=&quot;headerlink&quot; title=&quot;monit代码分析&quot;&gt;&lt;/a&gt;monit代码分析&lt;/h2&gt;&lt;p&gt;主要流程main函数:&lt;/p&gt;
&lt;figure class=&quot;highlight c
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
